<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MatrixMan&#39;s blog</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-04-18T17:23:48.304Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>CodingFucker</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用Pyautogui库实现网页自动截取Pdf</title>
    <link href="http://example.com/2022/04/18/%E4%BD%BF%E7%94%A8pyautogui%E5%BA%93%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E6%88%AA%E5%8F%96pdf/"/>
    <id>http://example.com/2022/04/18/%E4%BD%BF%E7%94%A8pyautogui%E5%BA%93%E5%AE%9E%E7%8E%B0%E7%BD%91%E9%A1%B5%E8%87%AA%E5%8A%A8%E6%88%AA%E5%8F%96pdf/</id>
    <published>2022-04-18T15:25:29.000Z</published>
    <updated>2022-04-18T17:23:48.304Z</updated>
    
    <content type="html"><![CDATA[<h3 id="引言">引言</h3><p>又接到老板任务，需要从一个预览pdf的网页强行下载这个pdf。多反人类呢？ 它网页css配置中采用了限制最大加载策略，每次只能显示10张，所以不能直接用浏览器的打印成pdf。 不是万不得已， 笔者不会采用最蠢方式完成重复性劳动的。尝试了采用爬虫获取， 但无奈前端方面技术太菜， 无法绕过最大显示设置， 即使能绕过， 显示还可能有问题。 无奈只能用最土的方法， 模拟鼠标键盘操作来用截图功能保存jpg，再转pdf。</p><h3 id="问题初探">问题初探</h3><p><img src="预览.jpg" title="面临的页面布局" alt="面临的页面布局"> 页面中值得注意的是， 不仅有竖页，也有横页，抽象布局如下 <img src="算法图.jpg" title="算法图" alt="算法图"> 为了视觉上区分方便，这里灰色代表横页， 白色代表竖页，他们在实际中均为白色，以下所述所有颜色均为实际颜色。A、B为两个比较靠近页面顶部的，在一条水平线上的的两个点， 要注意选点时不要让他们超出自己的竖边，否则没有鉴别行性。 发现可以通过两点所在像素的色彩值(RGB)，判断页面滑动的情况。 <strong>当A为白色时，表明滑动到横页。 当A黑，B白时，表明滑动到竖页。其他情况时， 表明滑动到两页间隙处。</strong> <img src="间隙.jpg" title="间隙" alt="间隙"></p><p>当可以判断位置时，其他所有步骤都迎刃而解。</p><p>因此, 设计了如下简单的算法来实现自动滚动截屏</p><pre><code>flag = 1 #表示两点目前是否在间隙处，是1，不是0while True:    页面下滚 #下滚距离不要超过间隙距离，否则有可能跳过    判断A点颜色，判断B点颜色    if A为白色 且 flag==1 时：        截图示意图灰色部分的横页        页面下滚        flag = 0 #不设置为0会导致每滚动一行就截图一次    elif A为白 且 B为黑 且 flag==1 时：        截图示意图白色部分的竖页        页面下滚         flag = 0    else：        flag = 1 # 进入了黑色间隙</code></pre><h3 id="代码">代码</h3><h4 id="自动滑动截图代码">自动滑动截图代码</h4><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> time</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pyautogui <span class="im">as</span> pg</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>time.sleep(<span class="dv">5</span>) <span class="co"># 留时间切换桌面到浏览器</span></span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>flag <span class="op">=</span> <span class="va">True</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>t <span class="op">=</span> <span class="dv">0</span></span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a><span class="cf">while</span> <span class="dv">1</span>:</span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>    pg.scroll(<span class="op">-</span><span class="dv">5</span>)</span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>    r, g, b <span class="op">=</span> pg.screenshot().getpixel((<span class="dv">603</span>, <span class="dv">155</span>)) <span class="co"># B的RGB值</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>    rr, gg, bb <span class="op">=</span> pg.screenshot().getpixel((<span class="dv">461</span>, <span class="dv">155</span>)) <span class="co"># A的RGB值</span></span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> rr <span class="op">&gt;</span> <span class="dv">250</span> : <span class="co">#横页</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> flag:</span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>            pg.scroll(<span class="op">-</span><span class="dv">40</span>) <span class="co">#跨过页眉，根据自己情况调整</span></span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>            im <span class="op">=</span> pg.screenshot(region<span class="op">=</span>(<span class="dv">473</span>, <span class="dv">177</span>, <span class="dv">1435</span><span class="op">-</span><span class="dv">473</span>, <span class="dv">803</span><span class="op">-</span><span class="dv">177</span>))</span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>            im.save(<span class="st">'./</span><span class="sc">%s</span><span class="st">.jpg'</span><span class="op">%</span>t)</span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>            pg.scroll(<span class="op">-</span><span class="dv">500</span>) <span class="co">#快速下滚，留点时间给浏览器缓冲加载</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>            t <span class="op">+=</span> <span class="dv">1</span></span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>            flag <span class="op">=</span> <span class="va">False</span>  </span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>            </span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">elif</span> r <span class="op">&gt;</span> <span class="dv">250</span> <span class="kw">and</span> rr <span class="op">&lt;</span> <span class="dv">250</span>: 竖页</span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> flag:</span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>            pg.scroll(<span class="op">-</span><span class="dv">63</span>) <span class="co">#跨过页眉，根据自己情况调整</span></span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>            im <span class="op">=</span> pg.screenshot(region<span class="op">=</span>(<span class="dv">639</span>, <span class="dv">161</span>, <span class="dv">1268</span><span class="op">-</span><span class="dv">639</span>, <span class="dv">1038</span><span class="op">-</span><span class="dv">161</span>))</span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>            im.save(<span class="st">'./</span><span class="sc">%s</span><span class="st">.jpg'</span><span class="op">%</span>t)</span><span id="cb2-26"><a href="#cb2-26" aria-hidden="true" tabindex="-1"></a>            pg.scroll(<span class="op">-</span><span class="dv">730</span>) <span class="co">#快速下滚，留点时间给浏览器缓冲加载</span></span><span id="cb2-27"><a href="#cb2-27" aria-hidden="true" tabindex="-1"></a>            t <span class="op">+=</span> <span class="dv">1</span></span><span id="cb2-28"><a href="#cb2-28" aria-hidden="true" tabindex="-1"></a>            flag <span class="op">=</span> <span class="va">False</span></span><span id="cb2-29"><a href="#cb2-29" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-30"><a href="#cb2-30" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb2-31"><a href="#cb2-31" aria-hidden="true" tabindex="-1"></a>        flag <span class="op">=</span> <span class="va">True</span></span></code></pre></div><h4 id="将所有图合成dpf代码">将所有图合成dpf代码</h4><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> img2pdf</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a>l <span class="op">=</span> []</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(<span class="dv">100</span>): <span class="co">#简单写了下数字， 可以根据自身需求自适应求图片数</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> os.path.exists(<span class="st">'./</span><span class="sc">%s</span><span class="st">.jpg'</span><span class="op">%</span>i):</span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a>        l.append(<span class="st">'./</span><span class="sc">%s</span><span class="st">.jpg'</span><span class="op">%</span>i)</span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a>        l.append(<span class="st">'./</span><span class="sc">%s</span><span class="st">.png'</span><span class="op">%</span>i)</span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(<span class="st">'/1.pdf'</span>, <span class="st">"wb"</span>) <span class="im">as</span> f:</span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>    f.write(img2pdf.convert(l))</span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>    </span></code></pre></div><p>收工！</p><p>码痴， coding 改变人生！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;引言&quot;&gt;引言&lt;/h3&gt;
&lt;p&gt;又接到老板任务，需要从一个预览pdf的网页强行下载这个pdf。多反人类呢？ 它网页css配置中采用了限制最大加载策略，每次只能显示10张，所以不能直接用浏览器的打印成pdf。 不是万不得已， 笔者不会采用最蠢方式完成重复性劳动的。尝试</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="自动化办公" scheme="http://example.com/tags/%E8%87%AA%E5%8A%A8%E5%8C%96%E5%8A%9E%E5%85%AC/"/>
    
  </entry>
  
  <entry>
    <title>腾讯笔试算法卷9.5第五题</title>
    <link href="http://example.com/2021/09/06/%E8%85%BE%E8%AE%AF%E7%AC%94%E8%AF%95%E7%AE%97%E6%B3%95%E5%8D%B79-5%E7%AC%AC%E4%BA%94%E9%A2%98/"/>
    <id>http://example.com/2021/09/06/%E8%85%BE%E8%AE%AF%E7%AC%94%E8%AF%95%E7%AE%97%E6%B3%95%E5%8D%B79-5%E7%AC%AC%E4%BA%94%E9%A2%98/</id>
    <published>2021-09-06T05:22:04.000Z</published>
    <updated>2022-04-18T15:31:50.667Z</updated>
    
    <content type="html"><![CDATA[<p>题目：小A在玩一个网络游戏，有一个抽装备环节。装备池总共有n+m件装备， 分别为n件普通装备和m件ssr装备。每次抽中一件ssr级装备，花费2元， 不放回。每次抽中一件普通装备，花费1元， 放回。所有装备抽中的概率相等。问：小A若想抽走所有ssr级装备，所有花费的期望是多少元？ <span class="math inline">\(\sum_{i=0}^N\int_{a}^{b}g(t,i)\text{d}t\)</span> 这里提供一个大佬的简便思路。 先考虑在n件普通装备，m件神装情况下， 只抽一件神装的花费期望。这里，抽中一件神装的概率为p=m/(m+n)。现在计算抽的 次数的期望。 假若第一次抽中，概率为1/p, 第二次才抽中(第一次放回),概率为1/(1-p)<em>1/p, 第三次才抽中，概率为 1/(1-p)</em>1/(1-p)<em>1/p。。。 这个分布期望就是所谓几何分布， 跟一直打靶直到打中为止的概率模型是一样的，期望次数是1/p ，这个有兴趣可以翻概率论，期望是一个级数求和。 那么只抽一件神装的次数期望就是1/p。现在求花费期望， 就像前面讲的打靶模型， 你抽了1/p次才抽中神装， 意味着前面 (1/p-1)次都抽的普通装， 那么前面花费是 (1/p-1)</em> 1 = 1/p-1 元， 最后一次抽中神装， 花费2元。所以，只抽一件神装的花费期望=1/p-1 + 2 = 1/p + 1 = (2m+n)/m 元。那么好了，我抽完一件神装后，再抽一件，花费期望不就是 (2(m-1)+n)/(m-1) , 然后累加下去不就是抽m件神装的总花费期望。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;题目：小A在玩一个网络游戏，有一个抽装备环节。装备池总共有n+m件装备， 分别为n件普通装备和m件ssr装备。每次抽中一件ssr级装备，花费2元， 不放回。每次抽中一件普通装备，花费1元， 放回。所有装备抽中的概率相等。问：小A若想抽走所有ssr级装备，所有花费的期望是多少</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="算法,笔试,概率" scheme="http://example.com/tags/%E7%AE%97%E6%B3%95-%E7%AC%94%E8%AF%95-%E6%A6%82%E7%8E%87/"/>
    
  </entry>
  
  <entry>
    <title>跑深度学习代码时自动选择显卡</title>
    <link href="http://example.com/2021/07/23/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%8A%A8%E9%80%89%E6%8B%A9%E6%98%BE%E5%8D%A1/"/>
    <id>http://example.com/2021/07/23/%E6%B7%B1%E5%BA%A6%E5%AD%A6%E4%B9%A0%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%87%AA%E5%8A%A8%E9%80%89%E6%8B%A9%E6%98%BE%E5%8D%A1/</id>
    <published>2021-07-22T16:43:08.000Z</published>
    <updated>2022-04-18T15:31:41.994Z</updated>
    
    <content type="html"><![CDATA[<p><img src="显卡.jpg"> ### 引言 长期以来，笔者在跑深度学习实验时，总会遇到这样一个问题: 究竟该选哪块(or 哪几块)卡？ 因为笔者使用的服务器一共有9块显卡, 有10个人可以用，每个人随机时间段使用。那么很常见的情况就是, 我头一天跑过的代码，第二天再跑的时候运行了几分钟甚至十来分钟后突然报错: OOM Error。。。跟吃shit了一样难受，最后灰溜溜的在终端输入nvidia-smi(我alias了也还是感觉麻烦)，用肉眼分析哪几个剩余显卡可以用。对于使用tensorflow的同学来说，尤是一场灾难，因为tensorflow的前摇时间比pytorch真的长了不知道多少。因此，如果能在每个深度学习代码前，加一个自动检测可用显卡程序，岂不是节约了很多时间。</p><h3 id="问题探究">问题探究</h3><p>1)try... except...</p><p>伪代码</p><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> cardnumber <span class="kw">in</span> gpuList:</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a>    <span class="cf">try</span>:</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>        os.environ[<span class="st">"CUDA_VISIBLE_DEVICE"</span>] <span class="op">=</span> cardnumber</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>        run_yourmodel()</span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="cf">except</span> OOMERROR <span class="im">as</span> e:</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">pass</span></span></code></pre></div><p>这个方案问题在于试错成本太高。试想我在使用tensorflow, 每次运行前都会预先检查显卡的各种信息，然后oom，然后试下一个显卡，时间会爆炸。甚至遇到分布式训练时候，我难道要在候选显卡列表里，排列组合所有的显卡组合？显然不行，因此这个方案放弃。</p><p>2)获取显卡信息后加载 在我的设想中，Nvidia官方应该是给了控制接口的，用于获取总的memory, 已经使用的memory, 剩余的memory。事实上, 还真的给了<span class="github-emoji"><span>😳</span><img src="https://github.githubassets.com/images/icons/emoji/unicode/1f633.png?v8" aria-hidden="true" onerror="this.parent.classList.add('github-emoji-fallback')"></span> <a href="https://developer.nvidia.com/nvidia-management-library-nvml">Nvidia nvml 显卡管理库</a> 这个是基于C扩展, 不过有人贡献了py API <a href="https://github.com/gpuopenanalytics/pynvml">Pynvml</a> 笔者在半年多之前没有发现这个项目，当时强行解析nvidia-smi信息，分析过程如下 首先用python执行terminal命令获取显卡信息</p><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> os.popen(<span class="st">'nvidia-smi'</span>).read():<span class="bu">print</span>(i)</span></code></pre></div><p>返回</p><pre><code>Fri Jul 23 21:05:39 2021+-----------------------------------------------------------------------------+| NVIDIA-SMI 440.33.01    Driver Version: 440.33.01    CUDA Version: 10.2     ||-------------------------------+----------------------+----------------------+| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC || Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. ||===============================+======================+======================||   0  TITAN RTX           Off  | 00000000:04:00.0 Off |                  N/A || 40%   46C    P8     5W / 280W |     11MiB / 24220MiB |      0%      Default |+-------------------------------+----------------------+----------------------+|   1  TITAN RTX           Off  | 00000000:06:00.0 Off |                  N/A || 97%   88C    P2   231W / 280W |  23526MiB / 24220MiB |    100%      Default |+-------------------------------+----------------------+----------------------+|   2  TITAN RTX           Off  | 00000000:07:00.0 Off |                  N/A || 41%   44C    P8     7W / 280W |     11MiB / 24220MiB |      0%      Default |+-------------------------------+----------------------+----------------------+|   3  TITAN V             Off  | 00000000:08:00.0 Off |                  N/A || 34%   49C    P8    29W / 250W |     12MiB / 12066MiB |      0%      Default |+-------------------------------+----------------------+----------------------+|   4  TITAN RTX           Off  | 00000000:0B:00.0 Off |                  N/A || 41%   44C    P8    15W / 280W |     11MiB / 24220MiB |      0%      Default |+-------------------------------+----------------------+----------------------+|   5  TITAN RTX           Off  | 00000000:0C:00.0 Off |                  N/A || 41%   46C    P8     9W / 280W |     11MiB / 24220MiB |      0%      Default |+-------------------------------+----------------------+----------------------+|   6  TITAN Xp            Off  | 00000000:0D:00.0 Off |                  N/A || 23%   39C    P8     9W / 250W |     10MiB / 12196MiB |      0%      Default |+-------------------------------+----------------------+----------------------+|   7  TITAN Xp            Off  | 00000000:0E:00.0 Off |                  N/A || 25%   44C    P8    10W / 250W |     10MiB / 12196MiB |      0%      Default |+-------------------------------+----------------------+----------------------+|   8  TITAN RTX           Off  | 00000000:0F:00.0 Off |                  N/A || 41%   46C    P8     1W / 280W |     11MiB / 24220MiB |      0%      Default |+-------------------------------+----------------------+----------------------++-----------------------------------------------------------------------------+| Processes:                                                       GPU Memory ||  GPU       PID   Type   Process name                             Usage      ||=============================================================================||    1     61162      C   ...xxx/anaconda3/envs/xxx/bin/python 23515MiB |+-----------------------------------------------------------------------------+</code></pre><p>尝试指定显卡输出2号显卡信息</p><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> i <span class="kw">in</span> os.popen(<span class="st">'nvidia-smi -2 1'</span>).read().split(<span class="st">'</span><span class="ch">\n</span><span class="st">'</span>):<span class="bu">print</span>(i)</span></code></pre></div><p>返回</p><pre><code>Fri Jul 23 21:10:46 2021+-----------------------------------------------------------------------------+| NVIDIA-SMI 440.33.01    Driver Version: 440.33.01    CUDA Version: 10.2     ||-------------------------------+----------------------+----------------------+| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC || Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. ||===============================+======================+======================||   2  TITAN RTX           Off  | 00000000:07:00.0 Off |                  N/A || 41%   44C    P8     6W / 280W |     11MiB / 24220MiB |      0%      Default |+-------------------------------+----------------------+----------------------++-----------------------------------------------------------------------------+| Processes:                                                       GPU Memory ||  GPU       PID   Type   Process name                             Usage      ||=============================================================================||  No running processes found                                                 |+-----------------------------------------------------------------------------+</code></pre><p>那么问题很清楚了, 我们在获取指定显卡信息后，需要提取出 11MiB / 24220MiB 这个字段的两个数。这个手写逻辑提取不是不可以, 但幸好我们有正则式匹配。</p><p><a href="https://www.zhihu.com/question/48219401/answer/742444326?utm_source=wechat_session&amp;utm_medium=social&amp;utm_oi=627839486953000960&amp;utm_content=group3_Answer&amp;utm_campaign=shareopn">笔者参考的文章</a></p><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> re</span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>GPU_state <span class="op">=</span> os.popen(<span class="st">'nvidia-smi -i 2'</span>).read()</span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a><span class="bu">print</span>(re.findall(<span class="st">'(\d+)(?=\s*MiB)'</span>, GPU_state))<span class="co">#(?=pattern)表示匹配pattern前面内容</span></span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a><span class="co"># 第一个(\d+)表示从后面匹配模式中第二次进行筛选, 匹配多个数字字符</span></span></code></pre></div><p>这里简单解释一下含义。(?=MiB)代表匹配<strong>前面有0次或多次空白符的MiB</strong>这里其实,只是一种防错机制。 ()表示匹配一次或多次数字， 连起来就是<strong>匹配MiB前面多个数字字符</strong></p><p>返回</p><pre><code>['11', '24220']</code></pre><p>这正是我们想要的。 下面给出一个自动显卡获取程序autoGPU, 输入需要的显卡数, 每张卡需要的显存数, 自动选择显卡。</p><div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> testGPU(<span class="bu">id</span><span class="op">=</span><span class="dv">0</span>, mem_collect<span class="op">=</span><span class="st">'auto'</span>): </span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    GPU_state <span class="op">=</span> os.popen(<span class="st">'nvidia-smi -i </span><span class="sc">%s</span><span class="st">'</span> <span class="op">%</span> <span class="bu">str</span>(<span class="bu">id</span>)).read()</span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    GPU_type <span class="op">=</span> re.findall(<span class="st">'(?=TITAN\s).*?(?=\s+Off)'</span>, GPU_state)[<span class="dv">0</span>] <span class="co">#获取型号</span></span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    Usage <span class="op">=</span> re.findall(<span class="st">'(\d+)(?=\s*MiB)'</span>, GPU_state)[<span class="dv">0</span>] <span class="co">#获取已使用显存</span></span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    Memory <span class="op">=</span> re.findall(<span class="st">'(\d+)(?=\s*MiB)'</span>, GPU_state)[<span class="dv">1</span>] <span class="co">#获取总显存</span></span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a>    IDLE <span class="op">=</span>  <span class="bu">int</span>(Memory) <span class="op">-</span> <span class="bu">int</span>(Usage) <span class="co"># 计算空闲显存</span></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>    <span class="cf">if</span> mem_collect <span class="op">==</span> <span class="st">'auto'</span>: <span class="co">#自动模式, 获取完全空闲显卡</span></span><span id="cb8-8"><a href="#cb8-8" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> <span class="bu">int</span>(Usage) <span class="op">&lt;</span> <span class="dv">20</span>: <span class="co"># 这里因为服务器开了gnome桌面服务, 会有不到20MiB显存占用</span></span><span id="cb8-9"><a href="#cb8-9" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">1</span>, GPU_type, IDLE, <span class="bu">int</span>(Memory)</span><span id="cb8-10"><a href="#cb8-10" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span><span id="cb8-11"><a href="#cb8-11" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">0</span>, GPU_type, IDLE, <span class="bu">int</span>(Memory)</span><span id="cb8-12"><a href="#cb8-12" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-13"><a href="#cb8-13" aria-hidden="true" tabindex="-1"></a>    <span class="cf">else</span>:</span><span id="cb8-14"><a href="#cb8-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> IDLE <span class="op">&gt;</span> mem_collect:</span><span id="cb8-15"><a href="#cb8-15" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">1</span>, GPU_type, IDLE, <span class="bu">int</span>(Memory)</span><span id="cb8-16"><a href="#cb8-16" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span><span id="cb8-17"><a href="#cb8-17" aria-hidden="true" tabindex="-1"></a>            <span class="cf">return</span> <span class="dv">0</span>, GPU_type, IDLE, <span class="bu">int</span>(Memory)</span><span id="cb8-18"><a href="#cb8-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-19"><a href="#cb8-19" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> autoGPU(GPU_NUM<span class="op">=</span><span class="dv">6</span>, GPU_MEM<span class="op">=</span><span class="st">'auto'</span>):</span><span id="cb8-20"><a href="#cb8-20" aria-hidden="true" tabindex="-1"></a>    os.environ[<span class="st">"CUDA_DEVICE_ORDER"</span>] <span class="op">=</span> <span class="st">"PCI_BUS_ID"</span> <span class="co">#将显卡获取顺序调整为PCI_BUS_ID模式,否则和 nvidia-smi 中的显卡顺序不一致</span></span><span id="cb8-21"><a href="#cb8-21" aria-hidden="true" tabindex="-1"></a>    ID <span class="op">=</span> []</span><span id="cb8-22"><a href="#cb8-22" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> [<span class="dv">8</span>, <span class="dv">5</span>, <span class="dv">4</span>, <span class="dv">2</span>, <span class="dv">1</span>, <span class="dv">0</span>, <span class="dv">3</span>, <span class="dv">7</span> ,<span class="dv">6</span>]: <span class="co">#自定义了一个显卡序号获取优先级顺序</span></span><span id="cb8-23"><a href="#cb8-23" aria-hidden="true" tabindex="-1"></a>        is_val, GPU, Usa, Mem <span class="op">=</span> testGPU(i, GPU_MEM) <span class="co">#输入显卡序号和需要的显存, 依次返回是否可用, GPU型号, 可用显存, 总共显存</span></span><span id="cb8-24"><a href="#cb8-24" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> is_val <span class="op">==</span> <span class="dv">1</span>:</span><span id="cb8-25"><a href="#cb8-25" aria-hidden="true" tabindex="-1"></a>            ID.append(<span class="bu">str</span>(i))</span><span id="cb8-26"><a href="#cb8-26" aria-hidden="true" tabindex="-1"></a>            <span class="bu">print</span>(<span class="st">'已选择第</span><span class="sc">{}</span><span class="st">张卡，型号为</span><span class="sc">{}</span><span class="st">，</span><span class="sc">{}</span><span class="st">MB/</span><span class="sc">{}</span><span class="st">MB显存可用'</span>.<span class="bu">format</span>(i, GPU, Usa, Mem))</span><span id="cb8-27"><a href="#cb8-27" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="bu">len</span>(ID) <span class="op">==</span> GPU_NUM:</span><span id="cb8-28"><a href="#cb8-28" aria-hidden="true" tabindex="-1"></a>                <span class="cf">break</span></span><span id="cb8-29"><a href="#cb8-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">assert</span> <span class="bu">len</span>(ID)<span class="op">==</span>GPU_NUM, <span class="st">'你要求的显卡条件无法满足'</span></span><span id="cb8-30"><a href="#cb8-30" aria-hidden="true" tabindex="-1"></a>    os.environ[<span class="st">'CUDA_VISIBLE_DEVICES'</span>] <span class="op">=</span> <span class="st">','</span>.join(ID) <span class="co"># 设置显卡</span></span><span id="cb8-31"><a href="#cb8-31" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-32"><a href="#cb8-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-33"><a href="#cb8-33" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span><span id="cb8-34"><a href="#cb8-34" aria-hidden="true" tabindex="-1"></a>    autoGPU(<span class="dv">3</span>, <span class="st">'auto'</span>) <span class="co">#自动模式选择3张显卡</span></span></code></pre></div><p>返回</p><pre><code>已选择第8张卡，型号为TITAN RTX，24209MB/24220MB显存可用已选择第5张卡，型号为TITAN RTX，24209MB/24220MB显存可用已选择第4张卡，型号为TITAN RTX，24209MB/24220MB显存可用</code></pre><h3 id="后记">后记</h3><p>这小段程序还有很多可以提升的地方, 这里只抛砖引玉。另外当时写这个程序的时候没有查到Nvidia官方提供的API, 现在看来还是用官方的轮子好一点。不过因此学习了一点正则式匹配, 也算有点收获。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;显卡.jpg&quot;&gt; ### 引言 长期以来，笔者在跑深度学习实验时，总会遇到这样一个问题: 究竟该选哪块(or 哪几块)卡？ 因为笔者使用的服务器一共有9块显卡, 有10个人可以用，每个人随机时间段使用。那么很常见的情况就是, 我头一天跑过的代码，第二天再</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="正则式匹配" scheme="http://example.com/tags/%E6%AD%A3%E5%88%99%E5%BC%8F%E5%8C%B9%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>零基础快速搭建公开数据集python爬虫</title>
    <link href="http://example.com/2021/07/05/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%85%AC%E5%BC%80%E6%95%B0%E6%8D%AE%E9%9B%86python%E7%88%AC%E8%99%AB/"/>
    <id>http://example.com/2021/07/05/%E9%9B%B6%E5%9F%BA%E7%A1%80%E5%BF%AB%E9%80%9F%E6%90%AD%E5%BB%BA%E5%85%AC%E5%BC%80%E6%95%B0%E6%8D%AE%E9%9B%86python%E7%88%AC%E8%99%AB/</id>
    <published>2021-07-05T12:13:45.000Z</published>
    <updated>2022-04-18T15:31:33.515Z</updated>
    
    <content type="html"><![CDATA[<p><img src="爬虫.jpg"> ### 引言</p><p>最近接到老板任务，需要重新下载前段时间下过的一个数据集。这个数据集网站有多反人类呢？我们前段时间两个人断断续续点了三天才下载完。原因是数据集本身是多条的，如果点击合并下载， 系统后台会先把所有的数据压缩成一个文件，再给你这个压缩包的下载链接。一次打包数量稍微多一点点就会打包失败， 即使成功了， 打包的时间爆炸长。一共几千条数据， 大概每次只能点二三十个， 要经历打包-下载-解压-归类， 还得和下一批数据起始位置衔接好， 还要两个人分工好。 第一次下载这个数据集的时候我都快吐了。身为一个具有hacker精神的人， 我不容许自己再这么蠢。 好奇心的驱使下， 花了4个小时零基础终于完成了爬虫代码， 优化了2个人3天的耗时。</p><img src="样例1.jpg" title="fig:几千条数据需要分段勾选" alt="几千条数据需要分段勾选"><center>几千条数据需要分段勾选</center><img src="样例2.png" title="fig:这里就点了十几个，半分钟了打包进度还是0%" alt="这里就点了十几个，半分钟了打包进度还是0%"><center>这里就点了十几个，半分钟了打包进度还是0%</center><h3 id="问题初探">问题初探</h3><p>首先经尝试发现， 每条数据单独下载是非常快的， 因为不用网站后台打包。那么很自然而然的思路就是， 如果能爬到每条数据背后的下载链接， 再依次下载， 便大功告成。 幸运的是， 笔者之前了解过浏览器(比如Windows Edge)一般都有一个开发者模式, 直觉告诉我, 右键点击每条数据链接，一定会有发现。经过尝试，右键点击检查，会直接定位到html文本(html 简单来说就是定义了整个网页布局)对应位置</p><img src="右键.jpg" title="fig:下载链接右键菜单" alt="下载链接右键菜单"><center>下载链接右键菜单</center><img src="html.jpg" title="fig:左边是页面中某条数据， 右边是查到的对应html代码块" alt="左边是页面中某条数据， 右边是查到的对应html代码块"><center>左边是页面中某条数据， 右边是查到的对应html代码块</center><p><br>接下来只需要爬取整个html文本到本地再解析即可。 这里其实遇到一个小问题，下载页面是下拉扩展式的，也就是必须鼠标拉到底，才能获取后面的数据。经过查阅得知， 这是分页式页面，需要爬虫模拟鼠标下拉，解决方案是有， 但我选择直接手动下拉到底，因此浏览器元素审查模块中加载了全部信息，直接复制到本地即可。</p><h3 id="问题再探">问题再探</h3><p>下面要进行html解析，首先要知道，html 和 xml 类似, 都具有树形结构。 经过观察，所有的下载链接均在</p><div class="sourceCode" id="cb1"><pre class="sourceCode html"><code class="sourceCode html"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">&lt;li&gt;&lt;a</span><span class="ot"> class=</span><span class="st">"op download"</span><span class="ot"> href=</span><span class="st">"/xxxxx?dl=1"</span><span class="kw">&gt;</span>下载<span class="kw">&lt;/a&gt;&lt;/li&gt;</span></span></code></pre></div><p>这样式的href里。解析代码如下:</p><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> bs4 <span class="im">import</span> BeautifulSoup</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a><span class="cf">with</span> <span class="bu">open</span>(<span class="st">'raw.html'</span>, encoding<span class="op">=</span><span class="st">'utf-8'</span>) <span class="im">as</span> f:</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>        soup <span class="op">=</span> BeautifulSoup(f,<span class="st">'html.parser'</span>)</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    l <span class="op">=</span> soup.find_all(name<span class="op">=</span><span class="st">'a'</span>, attrs<span class="op">=</span>{<span class="st">'class'</span>:<span class="st">'op download'</span>}) <span class="co"># 递归全文搜索 从叫a的结构体中找属性为 op download</span></span></code></pre></div><p>这里使用 BeautifulSoup4 解析库， l 返回的是所有下载链接的href所组成的列表。</p><p>根据href尝试爬取(代码隐去关键信息)</p><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> request</span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> tqdm</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="cf">for</span> item <span class="kw">in</span> tqdm.tqdm(l):</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a>    dladdress <span class="op">=</span> <span class="st">"某域名"</span> <span class="op">+</span> item[<span class="st">'href'</span>] <span class="co"># href 路径为数据库后台相对路径, 我们外网访问需要加公网域名</span></span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a>    source <span class="op">=</span> requests.get(url<span class="op">=</span>dladdress, verify<span class="op">=</span><span class="va">False</span>)</span></code></pre></div><p>返回</p><pre><code>b'\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;title&gt;Log In - Private Seafile&lt;/title&gt;\n&lt;meta http-equiv="Content-type" content="text/html; charset=utf-8" /&gt;\n&lt;meta name="keywords" content="File Collaboration Team Organization" /&gt;\n\n&lt;meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" /&gt;\n\n&lt;meta http-equiv="x-ua-compatible" content="ie=edge" /&gt;\n&lt;link rel="shortcut icon" href="/media/custom/favicon.ico" /&gt;\n&lt;link rel="stylesheet" type="text/css" href="/media/assets/css/bootstrap.min.b00faad199b5.css"/&gt;\n&lt;link rel="stylesheet" type="text/css" href="/media/css/jstree_default_theme/style.min.css" /&gt;\n&lt;link rel="stylesheet" type="text/css" href="/media/assets/css/magnific-popup.656241b2c8ed.css" /&gt;\n&lt;link rel="stylesheet" type="text/css" href="/media/css/seahub.min.css?t=1516678381" /&gt;\n\n&lt;style type="text/css"&gt;\nhtml, body, #wrapper { height:100%; }\n#wrapper {\n    background: url(\'/media/custom/login-bg.jpg\') center top no-repeat scroll;\n    background-size: cover;\n    padding-top:1px;\n}\n#main {\n    min-height:0;\n}\n#lang {\n    margin:0;\n}\n#lang-context {\n    font-weight:normal;\n}\n#lang-context-selector {\n    text-align:left;\n}\n&lt;/style&gt;\n\n\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id="wrapper" class="en"&gt;\n        \n        \n        \n\n        &lt;div id="header" class="navbar hide"&gt;\n            &lt;div id="header-inner"&gt;\n                \n                &lt;a href="/" id="logo" class="fleft"&gt;\n                    \n                    &lt;img src="/media/custom/mylogo.png" title="Private Seafile" alt="logo" width="244" height="32" /&gt;\n                    \n                &lt;/a&gt;\n                &lt;button class="sf2-icon-list-view side-nav-toggle hidden-md-up hide" title="Side Nav Menu" id="js-toggle-side-nav" aria-label="Side Nav Menu"&gt;&lt;/button&gt;\n\n                \n                 \n                &lt;div class="fright" id="lang"&gt;\n                    &lt;a href="#" id="lang-context" data-lang="en"&gt;English &lt;span class="icon-caret-down"&gt;&lt;/span&gt;&lt;/a&gt;\n                    &lt;div id="lang-context-selector" class="sf-popover hide"&gt;\n                        &lt;ul class="sf-popover-con"&gt;\n                            \n                            &lt;li&gt;&lt;a href="/i18n/?lang=en"&gt;English&lt;/a&gt;&lt;/li&gt;\n                            \n                            &lt;li&gt;&lt;a href="/i18n/?lang=zh-cn"&gt;\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87&lt;/a&gt;&lt;/li&gt;\n                            \n                        &lt;/ul&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                \n                \n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div id="main" class="clear container-fluid "&gt;\n            \n&lt;div class="login-panel-outer-container vh"&gt;\n&lt;div class="login-panel"&gt;\n    &lt;h1 class="login-panel-hd"&gt;Log In&lt;/h1&gt;\n    &lt;form action="" method="post" onsubmit="return check()"&gt;&lt;input type=\'hidden\' name=\'csrfmiddlewaretoken\' value=\'C75XMAtbeRg9m2r4emT46uLhV4oYW8vE\' /&gt;\n        &lt;input type="text" name="login" placeholder="Email or Username" aria-label="Email or Username" title="Email or Username" value="" class="input name-input" /&gt;&lt;br /&gt;\n        &lt;input type="password" name="password" placeholder="Password" aria-label="Password" title="Password" value="" class="input passwd-input" autocomplete="off" /&gt;\n\n        \n\n        &lt;input type="hidden" name="next" value="/lib/a37c012b-31cb-416b-b3e2-80589b19b3ff/file/L/hyper/053065_2-20x-roi6.raw?dl=1" /&gt;\n        \n        &lt;p class="error hide"&gt;&lt;/p&gt;\n        \n\n        &lt;label class="checkbox-label remember"&gt;\n            &lt;input type="checkbox" name="remember_me" class="vam remember-input" /&gt;\n            &lt;span class="vam"&gt;Remember me for 7 days &lt;/span&gt;\n        &lt;/label&gt;\n        &lt;a href="/accounts/password/reset/" class="normal forgot-passwd"&gt;Forgot password?&lt;/a&gt;\n\n        &lt;button type="submit" class="submit"&gt;Log In&lt;/button&gt;\n    &lt;/form&gt;\n\n    \n\n    \n\n    \n\n    \n\n    &lt;div class="login-panel-bottom-container"&gt;\n        \n        &lt;a href="/accounts/register/" class="normal fleft" id="sign-up"&gt;Signup&lt;/a&gt;\n        \n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n\n\n            \n            &lt;div id="confirm-popup" class="hide"&gt;\n                &lt;div id="confirm-con"&gt;&lt;/div&gt;\n                &lt;button id="confirm-yes"&gt;Yes&lt;/button&gt;\n                &lt;button class="simplemodal-close"&gt;No&lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n&lt;/div&gt;&lt;!-- wrapper --&gt;\n\n&lt;script type="text/javascript" src="/media/js/jquery-1.12.1.min.js" id="jquery"&gt;&lt;/script&gt;\n&lt;script type="text/javascript" src="/media/assets/scripts/lib/jquery.simplemodal.67fb20a63282.js"&gt;&lt;/script&gt;\n&lt;script type="text/javascript" src="/media/assets/scripts/lib/jquery.ui.tabs.7406a3c5d2e3.js"&gt;&lt;/script&gt;\n&lt;script type="text/javascript" src="/media/assets/scripts/lib/jstree.min.baba5642f663.js"&gt;&lt;/script&gt;\n&lt;script type="text/javascript" src="/media/js/jq.min.js"&gt;&lt;/script&gt;\n&lt;script type="text/javascript" src="/media/js/base.js?t=1516678381"&gt;&lt;/script&gt;\n&lt;script type="text/javascript"&gt;\nfunction ajaxErrorHandler(xhr, textStatus, errorThrown) {\n    if (xhr.responseText) {\n        feedback($.parseJSON(xhr.responseText).error||$.parseJSON(xhr.responseText).error_msg, \'error\');\n    } else {\n        feedback("Failed. Please check the network.", \'error\');\n    }\n}\n \n(function() {\n    var lang_context = $(\'#lang-context\'),\n        lang_selector = $(\'#lang-context-selector\');\n\n    lang_context.parent().css({\'position\':\'relative\'});\n\n    if ($(\'#header\').is(\':visible\')) { // for login page\n        lang_selector.css({\n            \'top\': lang_context.position().top + lang_context.height() + 5,\n            \'right\': 0\n        });\n    }\n\n    var setLangSelectorMaxHeight = function() {\n        if ($(\'#header\').is(\':visible\')) { // for login page\n            $(\'.sf-popover-con\', lang_selector).css({\n                \'max-height\': $(window).height() - lang_selector.offset().top - 12\n            });\n        }\n    };\n    $(window).resize(function() {\n        if (lang_selector.is(\':visible\')) {\n            setLangSelectorMaxHeight();\n        }\n    });\n\n    lang_context.click(function() {\n        lang_selector.toggleClass(\'hide\');\n        if (lang_selector.is(\':visible\')) {\n            setLangSelectorMaxHeight();\n        }\n        return false;\n    });\n\n    $(document).click(function(e) {\n        var element = e.target || e.srcElement;\n        if (element.id != \'lang-context-selector\' &amp;&amp; element.id != \'lang-context\') {\n            lang_selector.addClass(\'hide\');\n        }\n    });\n})();\n\n\nif ($(\'.side-nav\').length) {\n    $(\'#logo\').addClass(\'hidden-sm-down\');\n    $(\'#js-toggle-side-nav\').removeClass(\'hide\');\n}\n$(\'#js-toggle-side-nav\').click(function() {\n    $(\'.side-nav\').css({\'left\': 0});\n    return false;\n});\n$(\'.js-close-side-nav\').click(function() {\n    $(\'.side-nav\').css({\'left\': \'-300px\'});\n    return false;\n});\n$(window).resize(function() {\n    if ($(window).width() &gt;= 768) {\n        $(\'.side-nav\').css({\'left\': 0});\n    }\n});\n&lt;/script&gt;\n\n&lt;script src="../../media/js/crypto-js.js"&gt;&lt;/script&gt;\n&lt;!--&lt;script src="../../media/js/md5.js"&gt;&lt;/script&gt;--&gt;\n&lt;!--&lt;script type="text/javascript" src="http://www.osctools.net/js/CryptoJS/components/core-min.js"&gt;&lt;/script&gt;--&gt;\n&lt;!--&lt;script type="text/javascript" src="http://www.osctools.net/js/CryptoJS/rollups/md5.js"&gt;&lt;/script&gt;--&gt;\n&lt;script type="text/javascript"&gt;\n// $(\'.login-panel-outer-container\').prepend($($(\'#logo\').html()).attr({\'width\': 160, \'height\':40}).addClass(\'login-panel-logo\'));\n$(\'.login-panel-bottom-container\').append($(\'#lang\').removeClass(\'fright\'));\n\nvar $el = $(\'.login-panel-outer-container\');\nvar elHeight = $el.outerHeight();\nvar wdHeight = $(window).height();\nif (wdHeight &gt; elHeight) {\n    $el.css({\'margin-top\': (wdHeight - elHeight)/2});\n}\n$(\'#lang\').css({\'margin-left\': $(\'#sign-up\').outerWidth() + 10});\n$el.removeClass(\'vh\');\n\n$(\'#lang-context-selector\').css({\n    \'top\': \'-\' + ($(\'#lang\').offset().top - 5) + \'px\',\n    \'right\': 0\n});\n$(\'#lang-context-selector .sf-popover-con\').css({\n    \'max-height\': $(\'#lang\').offset().top - 10\n});\n\n$(\'[name="login"]\').focus();\n\n//my function\nfunction check(){\nconst key = CryptoJS.enc.Utf8.parse("1234123412ABCDEF"); \nconst iv = CryptoJS.enc.Utf8.parse(\'ABCDEF1234123412\'); \nvar password=$(\'input[name="password"]\').val();\nlet srcs = CryptoJS.enc.Utf8.parse(password);\nlet encrypted = CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });\nvar newpass=encrypted.ciphertext.toString().toUpperCase();\n//var newpass="12121212";\n//$("#password").val(password);\n//$(\'input[type="password"]\').attr(\'value\',password);\n$(\'input[name="password"]\').val(newpass);\n//$(\'input[name="password"]\').attr(\'value\',password);\nreturn true;\n}\n\nfunction setCaptchaInputWidth() {\n    $(\'#id_captcha_1\').outerWidth($(\'.input\').outerWidth() - $(\'.captcha\').width() - $(\'#refresh-captcha\').outerWidth(true) - 10);\n}\n$(window).load(setCaptchaInputWidth);\n$(\'.captcha\').load(setCaptchaInputWidth);\n$(\'#refresh-captcha\').click(function() {\n    $.ajax({\n        url: \'/captcha/refresh/\',\n        dataType:\'json\',\n        cache:false,\n        success: function(data) {\n            $(\'.captcha\').attr(\'src\', data[\'image_url\']);\n            $(\'#id_captcha_0\').val(data[\'key\']);\n        },\n        error: function() {\n            $(\'.error\').removeClass(\'hide\').html("Failed to refresh the CAPTCHA, please try again later.");\n        }\n    });\n    return false;\n});\n\n$(\'input[type="submit"]\').click(function(){\n    if (!$.trim($(\'input[name="login"]\').val())) {\n        $(\'.error\').removeClass(\'hide\').html("Email or username cannot be blank");\n        return false;\n    }\n    if (!$.trim($(\'input[name="password"]\').val())) {\n        $(\'.error\').removeClass(\'hide\').html("Password cannot be blank");\n        return false;\n    }\n});\n// set tabindex\n$(function() {\n    $(\'input:not([type="hidden"])\').each(function(index) {\n        $(this).attr(\'tabindex\', index + 1);\n    });\n});\n\n\n\n\n\n\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n'Code Formats for Web Development - Open Social Communication Toolsb'\n\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang="en"&gt;\n&lt;head&gt;\n&lt;title&gt;Log In - Private Seafile&lt;/title&gt;\n&lt;meta http-equiv="Content-type" content="text/html; charset=utf-8" /&gt;\n&lt;meta name="keywords" content="File Collaboration Team Organization" /&gt;\n\n&lt;meta name="viewport" content="width=device-width, initial-scale=1, user-scalable=no" /&gt;\n\n&lt;meta http-equiv="x-ua-compatible" content="ie=edge" /&gt;\n&lt;link rel="shortcut icon" href="/media/custom/favicon.ico" /&gt;\n&lt;link rel="stylesheet" type="text/css" href="/media/assets/css/bootstrap.min.b00faad199b5.css"/&gt;\n&lt;link rel="stylesheet" type="text/css" href="/media/css/jstree_default_theme/style.min.css" /&gt;\n&lt;link rel="stylesheet" type="text/css" href="/media/assets/css/magnific-popup.656241b2c8ed.css" /&gt;\n&lt;link rel="stylesheet" type="text/css" href="/media/css/seahub.min.css?t=1516678381" /&gt;\n\n&lt;style type="text/css"&gt;\nhtml, body, #wrapper { height:100%; }\n#wrapper {\n    background: url(\'/media/custom/login-bg.jpg\') center top no-repeat scroll;\n    background-size: cover;\n    padding-top:1px;\n}\n#main {\n    min-height:0;\n}\n#lang {\n    margin:0;\n}\n#lang-context {\n    font-weight:normal;\n}\n#lang-context-selector {\n    text-align:left;\n}\n&lt;/style&gt;\n\n\n&lt;/head&gt;\n\n&lt;body&gt;\n    &lt;div id="wrapper" class="en"&gt;\n        \n        \n        \n\n        &lt;div id="header" class="navbar hide"&gt;\n            &lt;div id="header-inner"&gt;\n                \n                &lt;a href="/" id="logo" class="fleft"&gt;\n                    \n                    &lt;img src="/media/custom/mylogo.png" title="Private Seafile" alt="logo" width="244" height="32" /&gt;\n                    \n                &lt;/a&gt;\n                &lt;button class="sf2-icon-list-view side-nav-toggle hidden-md-up hide" title="Side Nav Menu" id="js-toggle-side-nav" aria-label="Side Nav Menu"&gt;&lt;/button&gt;\n\n                \n                 \n                &lt;div class="fright" id="lang"&gt;\n                    &lt;a href="#" id="lang-context" data-lang="en"&gt;English &lt;span class="icon-caret-down"&gt;&lt;/span&gt;&lt;/a&gt;\n                    &lt;div id="lang-context-selector" class="sf-popover hide"&gt;\n                        &lt;ul class="sf-popover-con"&gt;\n                            \n                            &lt;li&gt;&lt;a href="/i18n/?lang=en"&gt;English&lt;/a&gt;&lt;/li&gt;\n                            \n                            &lt;li&gt;&lt;a href="/i18n/?lang=zh-cn"&gt;\xe7\xae\x80\xe4\xbd\x93\xe4\xb8\xad\xe6\x96\x87&lt;/a&gt;&lt;/li&gt;\n                            \n                        &lt;/ul&gt;\n                    &lt;/div&gt;\n                &lt;/div&gt;\n                \n                \n            &lt;/div&gt;\n        &lt;/div&gt;\n\n        &lt;div id="main" class="clear container-fluid "&gt;\n            \n&lt;div class="login-panel-outer-container vh"&gt;\n&lt;div class="login-panel"&gt;\n    &lt;h1 class="login-panel-hd"&gt;Log In&lt;/h1&gt;\n    &lt;form action="" method="post" onsubmit="return check()"&gt;&lt;input type=\'hidden\' name=\'csrfmiddlewaretoken\' value=\'C75XMAtbeRg9m2r4emT46uLhV4oYW8vE\' /&gt;\n        &lt;input type="text" name="login" placeholder="Email or Username" aria-label="Email or Username" title="Email or Username" value="" class="input name-input" /&gt;&lt;br /&gt;\n        &lt;input type="password" name="password" placeholder="Password" aria-label="Password" title="Password" value="" class="input passwd-input" autocomplete="off" /&gt;\n\n        \n\n        &lt;input type="hidden" name="next" value="/lib/a37c012b-31cb-416b-b3e2-80589b19b3ff/file/L/hyper/053065_2-20x-roi6.raw?dl=1" /&gt;\n        \n        &lt;p class="error hide"&gt;&lt;/p&gt;\n        \n\n        &lt;label class="checkbox-label remember"&gt;\n            &lt;input type="checkbox" name="remember_me" class="vam remember-input" /&gt;\n            &lt;span class="vam"&gt;Remember me for 7 days &lt;/span&gt;\n        &lt;/label&gt;\n        &lt;a href="/accounts/password/reset/" class="normal forgot-passwd"&gt;Forgot password?&lt;/a&gt;\n\n        &lt;button type="submit" class="submit"&gt;Log In&lt;/button&gt;\n    &lt;/form&gt;\n\n    \n\n    \n\n    \n\n    \n\n    &lt;div class="login-panel-bottom-container"&gt;\n        \n        &lt;a href="/accounts/register/" class="normal fleft" id="sign-up"&gt;Signup&lt;/a&gt;\n        \n    &lt;/div&gt;\n&lt;/div&gt;\n&lt;/div&gt;\n\n\n            \n            &lt;div id="confirm-popup" class="hide"&gt;\n                &lt;div id="confirm-con"&gt;&lt;/div&gt;\n                &lt;button id="confirm-yes"&gt;Yes&lt;/button&gt;\n                &lt;button class="simplemodal-close"&gt;No&lt;/button&gt;\n            &lt;/div&gt;\n        &lt;/div&gt;\n\n&lt;/div&gt;&lt;!-- wrapper --&gt;\n\n&lt;script type="text/javascript" src="/media/js/jquery-1.12.1.min.js" id="jquery"&gt;&lt;/script&gt;\n&lt;script type="text/javascript" src="/media/assets/scripts/lib/jquery.simplemodal.67fb20a63282.js"&gt;&lt;/script&gt;\n&lt;script type="text/javascript" src="/media/assets/scripts/lib/jquery.ui.tabs.7406a3c5d2e3.js"&gt;&lt;/script&gt;\n&lt;script type="text/javascript" src="/media/assets/scripts/lib/jstree.min.baba5642f663.js"&gt;&lt;/script&gt;\n&lt;script type="text/javascript" src="/media/js/jq.min.js"&gt;&lt;/script&gt;\n&lt;script type="text/javascript" src="/media/js/base.js?t=1516678381"&gt;&lt;/script&gt;\n&lt;script type="text/javascript"&gt;\nfunction ajaxErrorHandler(xhr, textStatus, errorThrown) {\n    if (xhr.responseText) {\n        feedback($.parseJSON(xhr.responseText).error||$.parseJSON(xhr.responseText).error_msg, \'error\');\n    } else {\n        feedback("Failed. Please check the network.", \'error\');\n    }\n}\n \n(function() {\n    var lang_context = $(\'#lang-context\'),\n        lang_selector = $(\'#lang-context-selector\');\n\n    lang_context.parent().css({\'position\':\'relative\'});\n\n    if ($(\'#header\').is(\':visible\')) { // for login page\n        lang_selector.css({\n            \'top\': lang_context.position().top + lang_context.height() + 5,\n            \'right\': 0\n        });\n    }\n\n    var setLangSelectorMaxHeight = function() {\n        if ($(\'#header\').is(\':visible\')) { // for login page\n            $(\'.sf-popover-con\', lang_selector).css({\n                \'max-height\': $(window).height() - lang_selector.offset().top - 12\n            });\n        }\n    };\n    $(window).resize(function() {\n        if (lang_selector.is(\':visible\')) {\n            setLangSelectorMaxHeight();\n        }\n    });\n\n    lang_context.click(function() {\n        lang_selector.toggleClass(\'hide\');\n        if (lang_selector.is(\':visible\')) {\n            setLangSelectorMaxHeight();\n        }\n        return false;\n    });\n\n    $(document).click(function(e) {\n        var element = e.target || e.srcElement;\n        if (element.id != \'lang-context-selector\' &amp;&amp; element.id != \'lang-context\') {\n            lang_selector.addClass(\'hide\');\n        }\n    });\n})();\n\n\nif ($(\'.side-nav\').length) {\n    $(\'#logo\').addClass(\'hidden-sm-down\');\n    $(\'#js-toggle-side-nav\').removeClass(\'hide\');\n}\n$(\'#js-toggle-side-nav\').click(function() {\n    $(\'.side-nav\').css({\'left\': 0});\n    return false;\n});\n$(\'.js-close-side-nav\').click(function() {\n    $(\'.side-nav\').css({\'left\': \'-300px\'});\n    return false;\n});\n$(window).resize(function() {\n    if ($(window).width() &gt;= 768) {\n        $(\'.side-nav\').css({\'left\': 0});\n    }\n});\n&lt;/script&gt;\n\n&lt;script src="../../media/js/crypto-js.js"&gt;&lt;/script&gt;\n&lt;!--&lt;script src="../../media/js/md5.js"&gt;&lt;/script&gt;--&gt;\n&lt;!--&lt;script type="text/javascript" src="http://www.osctools.net/js/CryptoJS/components/core-min.js"&gt;&lt;/script&gt;--&gt;\n&lt;!--&lt;script type="text/javascript" src="http://www.osctools.net/js/CryptoJS/rollups/md5.js"&gt;&lt;/script&gt;--&gt;\n&lt;script type="text/javascript"&gt;\n// $(\'.login-panel-outer-container\').prepend($($(\'#logo\').html()).attr({\'width\': 160, \'height\':40}).addClass(\'login-panel-logo\'));\n$(\'.login-panel-bottom-container\').append($(\'#lang\').removeClass(\'fright\'));\n\nvar $el = $(\'.login-panel-outer-container\');\nvar elHeight = $el.outerHeight();\nvar wdHeight = $(window).height();\nif (wdHeight &gt; elHeight) {\n    $el.css({\'margin-top\': (wdHeight - elHeight)/2});\n}\n$(\'#lang\').css({\'margin-left\': $(\'#sign-up\').outerWidth() + 10});\n$el.removeClass(\'vh\');\n\n$(\'#lang-context-selector\').css({\n    \'top\': \'-\' + ($(\'#lang\').offset().top - 5) + \'px\',\n    \'right\': 0\n});\n$(\'#lang-context-selector .sf-popover-con\').css({\n    \'max-height\': $(\'#lang\').offset().top - 10\n});\n\n$(\'[name="login"]\').focus();\n\n//my function\nfunction check(){\nconst key = CryptoJS.enc.Utf8.parse("1234123412ABCDEF"); \nconst iv = CryptoJS.enc.Utf8.parse(\'ABCDEF1234123412\'); \nvar password=$(\'input[name="password"]\').val();\nlet srcs = CryptoJS.enc.Utf8.parse(password);\nlet encrypted = CryptoJS.AES.encrypt(srcs, key, { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 });\nvar newpass=encrypted.ciphertext.toString().toUpperCase();\n//var newpass="12121212";\n//$("#password").val(password);\n//$(\'input[type="password"]\').attr(\'value\',password);\n$(\'input[name="password"]\').val(newpass);\n//$(\'input[name="password"]\').attr(\'value\',password);\nreturn true;\n}\n\nfunction setCaptchaInputWidth() {\n    $(\'#id_captcha_1\').outerWidth($(\'.input\').outerWidth() - $(\'.captcha\').width() - $(\'#refresh-captcha\').outerWidth(true) - 10);\n}\n$(window).load(setCaptchaInputWidth);\n$(\'.captcha\').load(setCaptchaInputWidth);\n$(\'#refresh-captcha\').click(function() {\n    $.ajax({\n        url: \'/captcha/refresh/\',\n        dataType:\'json\',\n        cache:false,\n        success: function(data) {\n            $(\'.captcha\').attr(\'src\', data[\'image_url\']);\n            $(\'#id_captcha_0\').val(data[\'key\']);\n        },\n        error: function() {\n            $(\'.error\').removeClass(\'hide\').html("Failed to refresh the CAPTCHA, please try again later.");\n        }\n    });\n    return false;\n});\n\n$(\'input[type="submit"]\').click(function(){\n    if (!$.trim($(\'input[name="login"]\').val())) {\n        $(\'.error\').removeClass(\'hide\').html("Email or username cannot be blank");\n        return false;\n    }\n    if (!$.trim($(\'input[name="password"]\').val())) {\n        $(\'.error\').removeClass(\'hide\').html("Password cannot be blank");\n        return false;\n    }\n});\n// set tabindex\n$(function() {\n    $(\'input:not([type="hidden"])\').each(function(index) {\n        $(this).attr(\'tabindex\', index + 1);\n    });\n});\n\n\n\n\n\n\n&lt;/script&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n'</code></pre><p>虽然看不懂是什么， 但大概知道是没账号密码。联想到手动下载时只需要一开始登陆，那么这里request请求一定需要cookie而不是输入账号密码, 我们需要<strong>模拟保存cookie的浏览器请求</strong>。Edge浏览器打开数据集网站，按F12， 点击应用程序，左侧选择 cookie，会出现明文名称-值，用python字典将其存储，作为参数输入request。http协议还需要一个请求头(就笔者爬的这个网站来说，没有请求头也行, 读者有兴趣可以看看http协议)，完整爬取代码如下：</p><img src="cookie.jpg" title="fig:Edge查找网站保存的Cookie" alt="Edge查找网站保存的Cookie"><center>Edge查找网站保存的Cookie</center><p><br></p><div class="sourceCode" id="cb5"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> threading <span class="im">import</span> Thread</span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> requests</span><span id="cb5-5"><a href="#cb5-5" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> tqdm</span><span id="cb5-6"><a href="#cb5-6" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> bs4 <span class="im">import</span> BeautifulSoup</span><span id="cb5-7"><a href="#cb5-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-8"><a href="#cb5-8" aria-hidden="true" tabindex="-1"></a>requests.packages.urllib3.disable_warnings()</span><span id="cb5-9"><a href="#cb5-9" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-10"><a href="#cb5-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-11"><a href="#cb5-11" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> crawler(l):</span><span id="cb5-12"><a href="#cb5-12" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 模拟火狐浏览器登陆</span></span><span id="cb5-13"><a href="#cb5-13" aria-hidden="true" tabindex="-1"></a>    header <span class="op">=</span> {<span class="st">'User-Agent'</span>: <span class="st">'Mozilla/5.0 (Windows NT 6.1; Win64; x64)'</span>}</span><span id="cb5-14"><a href="#cb5-14" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 字典内部保存为字符串, 从浏览器开发者模式中读取</span></span><span id="cb5-15"><a href="#cb5-15" aria-hidden="true" tabindex="-1"></a>    cookies <span class="op">=</span> { <span class="st">'XXX'</span>: <span class="st">'XXX'</span>,</span><span id="cb5-16"><a href="#cb5-16" aria-hidden="true" tabindex="-1"></a>                <span class="st">'XXX'</span>: <span class="st">'XXX'</span>,</span><span id="cb5-17"><a href="#cb5-17" aria-hidden="true" tabindex="-1"></a>                <span class="st">'XXX'</span>: <span class="st">'XXX'</span>}</span><span id="cb5-18"><a href="#cb5-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-19"><a href="#cb5-19" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> item <span class="kw">in</span> tqdm.tqdm(l):</span><span id="cb5-20"><a href="#cb5-20" aria-hidden="true" tabindex="-1"></a>        dladdress <span class="op">=</span> <span class="st">"某域名"</span> <span class="op">+</span> item[<span class="st">'href'</span>]</span><span id="cb5-21"><a href="#cb5-21" aria-hidden="true" tabindex="-1"></a>        source <span class="op">=</span> requests.get(url<span class="op">=</span>dladdress, cookies<span class="op">=</span>cookies, headers<span class="op">=</span>header,verify<span class="op">=</span><span class="va">False</span>)<span class="co">#取消安全验证</span></span><span id="cb5-22"><a href="#cb5-22" aria-hidden="true" tabindex="-1"></a>        name <span class="op">=</span> source.headers[<span class="st">'Content-Disposition'</span>].split(<span class="st">' '</span>)[<span class="dv">1</span>][<span class="dv">1</span>:<span class="op">-</span><span class="dv">1</span>] <span class="co">#从网站响应header中获得文件名</span></span><span id="cb5-23"><a href="#cb5-23" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> source.status_code <span class="op">==</span> <span class="dv">200</span>:   <span class="co">#响应代码200 表示访问成功，http 协议规定</span></span><span id="cb5-24"><a href="#cb5-24" aria-hidden="true" tabindex="-1"></a>            <span class="cf">with</span> <span class="bu">open</span>(<span class="st">'./hyper/'</span> <span class="op">+</span> name, <span class="st">'wb'</span>) <span class="im">as</span> fp:</span><span id="cb5-25"><a href="#cb5-25" aria-hidden="true" tabindex="-1"></a>                fp.write(source.content)</span><span id="cb5-26"><a href="#cb5-26" aria-hidden="true" tabindex="-1"></a>                fp.close()</span><span id="cb5-27"><a href="#cb5-27" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-28"><a href="#cb5-28" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-29"><a href="#cb5-29" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span><span id="cb5-30"><a href="#cb5-30" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-31"><a href="#cb5-31" aria-hidden="true" tabindex="-1"></a>    <span class="cf">with</span> <span class="bu">open</span>(<span class="st">'raw.html'</span>, encoding<span class="op">=</span><span class="st">'utf-8'</span>) <span class="im">as</span> f:  <span class="co"># raw.html 是浏览器手动下载下来的html文件</span></span><span id="cb5-32"><a href="#cb5-32" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-33"><a href="#cb5-33" aria-hidden="true" tabindex="-1"></a>        soup <span class="op">=</span> BeautifulSoup(f,<span class="st">'html.parser'</span>)</span><span id="cb5-34"><a href="#cb5-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-35"><a href="#cb5-35" aria-hidden="true" tabindex="-1"></a>    l <span class="op">=</span> soup.find_all(name<span class="op">=</span><span class="st">'a'</span>, attrs<span class="op">=</span>{<span class="st">'class'</span>:<span class="st">'op download'</span>})</span><span id="cb5-36"><a href="#cb5-36" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-37"><a href="#cb5-37" aria-hidden="true" tabindex="-1"></a>    ThreadPool <span class="op">=</span> []</span><span id="cb5-38"><a href="#cb5-38" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-39"><a href="#cb5-39" aria-hidden="true" tabindex="-1"></a>    tasknum <span class="op">=</span> <span class="dv">5</span>  <span class="co">#设置5线程爬取数据</span></span><span id="cb5-40"><a href="#cb5-40" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-41"><a href="#cb5-41" aria-hidden="true" tabindex="-1"></a>    interval <span class="op">=</span> <span class="bu">len</span>(l)<span class="op">//</span>(tasknum) <span class="op">+</span> <span class="dv">1</span> <span class="co"># 每个线程分配的任务数, +1代表最后一个线程分配任务数必然大于所剩任务</span></span><span id="cb5-42"><a href="#cb5-42" aria-hidden="true" tabindex="-1"></a></span><span id="cb5-43"><a href="#cb5-43" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> <span class="bu">range</span>(tasknum):  </span><span id="cb5-44"><a href="#cb5-44" aria-hidden="true" tabindex="-1"></a>        ThreadPool.append(Thread(target<span class="op">=</span>crawler, args<span class="op">=</span>([l[i<span class="op">*</span>interval:(i<span class="op">+</span><span class="dv">1</span>)<span class="op">*</span>interval]]),))  </span><span id="cb5-45"><a href="#cb5-45" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 线程池中添加一个线程</span></span><span id="cb5-46"><a href="#cb5-46" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 注意这个线程池是一个广义的概念</span></span><span id="cb5-47"><a href="#cb5-47" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 你可以用任意数据结构来实现</span></span><span id="cb5-48"><a href="#cb5-48" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 方便存入、操作线程对象即可</span></span><span id="cb5-49"><a href="#cb5-49" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> p <span class="kw">in</span> ThreadPool:</span><span id="cb5-50"><a href="#cb5-50" aria-hidden="true" tabindex="-1"></a>        p.start()</span><span id="cb5-51"><a href="#cb5-51" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> p <span class="kw">in</span> ThreadPool:</span><span id="cb5-52"><a href="#cb5-52" aria-hidden="true" tabindex="-1"></a>        p.join()</span><span id="cb5-53"><a href="#cb5-53" aria-hidden="true" tabindex="-1"></a>   </span></code></pre></div><p>大功告成！ Enjoy it! ### 后记</p><p>笔者之前几乎未接触过爬虫方面，甚至网络方面知识，虽然最终代码只有几十行， 但探索的过程却是十分艰辛的，短时间内需要在众多过时爬虫文章中， 提炼出你所需要的。 我一向信奉问题驱动，虽然没有考虑各种爬虫因素(比如安全方面、反爬方面)，但简陋的代码还是帮我解决了迫切的问题，值得庆幸！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;爬虫.jpg&quot;&gt; ### 引言&lt;/p&gt;
&lt;p&gt;最近接到老板任务，需要重新下载前段时间下过的一个数据集。这个数据集网站有多反人类呢？我们前段时间两个人断断续续点了三天才下载完。原因是数据集本身是多条的，如果点击合并下载， 系统后台会先把所有的数据压缩成一个</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="爬虫" scheme="http://example.com/tags/%E7%88%AC%E8%99%AB/"/>
    
  </entry>
  
  <entry>
    <title>pandas 多线程数据处理</title>
    <link href="http://example.com/2021/05/19/pandas-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/"/>
    <id>http://example.com/2021/05/19/pandas-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%95%B0%E6%8D%AE%E5%A4%84%E7%90%86/</id>
    <published>2021-05-19T01:12:19.000Z</published>
    <updated>2021-07-05T16:58:09.611Z</updated>
    
    <content type="html"><![CDATA[<p><img src="熊猫.jpg"> 最近业务需要处理一批表格数据。处理过程中，成千上万条数据都需要进行i/o读写，自然而然要用到并发编程。</p><p>python并发编程主要包括以下三种：</p><ol type="1"><li><p>多进程：主要用于处理cpu密集型任务。</p></li><li><p>多线程：主要用于处理i/o密集型任务.</p></li><li><p>协程：为了解决2) 线程之间切换资源开销浪费而产生，又叫微线程， 通常和多进程配合使用， 效果奇佳。</p></li></ol><p>这里详细概念、用法不作赘述， 笔者当年学习的时候看过几篇不错的入门， 地址这里给出。</p><p><a href="https://zhuanlan.zhihu.com/p/46798399">爱coding：python并行计算（上）：multiprocessing、multiprocess模块</a></p><p><a href="https://zhuanlan.zhihu.com/p/46368084">一文看懂Python多进程与多线程编程(工作学习面试必读)</a></p><p><a href="https://zhuanlan.zhihu.com/p/64702600">一篇文章搞定Python多进程(全)</a></p><p><a href="https://zhuanlan.zhihu.com/p/70256971">【面试高频问题】线程、进程、协程</a></p><p>因为是处理i/o密集型任务，这里采用第二种并发方式(其实是笔者没玩过协程哈哈)。废话不多说， 直接上核心框架:</p><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> threading <span class="im">import</span> Thread</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> MyThread(Thread):</span><span id="cb1-5"><a href="#cb1-5" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, group<span class="op">=</span><span class="va">None</span>, target<span class="op">=</span><span class="va">None</span>, name<span class="op">=</span><span class="va">None</span>,</span><span id="cb1-6"><a href="#cb1-6" aria-hidden="true" tabindex="-1"></a>                 args<span class="op">=</span>(), kwargs<span class="op">=</span><span class="va">None</span>, <span class="op">*</span>, daemon<span class="op">=</span><span class="va">None</span>) <span class="op">-&gt;</span> <span class="va">None</span>:   <span class="co">#这里定义直接copy Thread类里原生定义</span></span><span id="cb1-7"><a href="#cb1-7" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>().<span class="fu">__init__</span>(group<span class="op">=</span>group, target<span class="op">=</span>target, </span><span id="cb1-8"><a href="#cb1-8" aria-hidden="true" tabindex="-1"></a>                        name<span class="op">=</span>name, args<span class="op">=</span>args, </span><span id="cb1-9"><a href="#cb1-9" aria-hidden="true" tabindex="-1"></a>                        kwargs<span class="op">=</span>kwargs, daemon<span class="op">=</span>daemon)  </span><span id="cb1-10"><a href="#cb1-10" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-11"><a href="#cb1-11" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> run(<span class="va">self</span>) <span class="op">-&gt;</span> <span class="va">None</span>:</span><span id="cb1-12"><a href="#cb1-12" aria-hidden="true" tabindex="-1"></a>        <span class="cf">try</span>:</span><span id="cb1-13"><a href="#cb1-13" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="va">self</span>._target:</span><span id="cb1-14"><a href="#cb1-14" aria-hidden="true" tabindex="-1"></a>                <span class="va">self</span>.result <span class="op">=</span> <span class="va">self</span>._target(<span class="op">*</span><span class="va">self</span>._args, <span class="op">**</span><span class="va">self</span>._kwargs) <span class="co">#与Thread类唯一不同的是， 我们用类内属性result保存每个线程结果</span></span><span id="cb1-15"><a href="#cb1-15" aria-hidden="true" tabindex="-1"></a>        <span class="cf">finally</span>:</span><span id="cb1-16"><a href="#cb1-16" aria-hidden="true" tabindex="-1"></a>            <span class="kw">del</span> <span class="va">self</span>._target, <span class="va">self</span>._args, <span class="va">self</span>._kwargs</span><span id="cb1-17"><a href="#cb1-17" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-18"><a href="#cb1-18" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-19"><a href="#cb1-19" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span><span id="cb1-20"><a href="#cb1-20" aria-hidden="true" tabindex="-1"></a>    ThreadPool <span class="op">=</span> []</span><span id="cb1-21"><a href="#cb1-21" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> i <span class="kw">in</span> iterator:  <span class="co">#伪代码， 表示一个迭代器生成多个任务</span></span><span id="cb1-22"><a href="#cb1-22" aria-hidden="true" tabindex="-1"></a>        ThreadPool.append(MyThread(arget<span class="op">=</span>func, args<span class="op">=</span>(<span class="op">*</span>args,)))  </span><span id="cb1-23"><a href="#cb1-23" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 线程池中添加一个线程</span></span><span id="cb1-24"><a href="#cb1-24" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 注意这个线程池是一个广义的概念</span></span><span id="cb1-25"><a href="#cb1-25" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 你可以用任意数据结构来实现</span></span><span id="cb1-26"><a href="#cb1-26" aria-hidden="true" tabindex="-1"></a>    <span class="co"># 方便存入、操作线程对象即可</span></span><span id="cb1-27"><a href="#cb1-27" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> p <span class="kw">in</span> ThreadPool:</span><span id="cb1-28"><a href="#cb1-28" aria-hidden="true" tabindex="-1"></a>        p.start()</span><span id="cb1-29"><a href="#cb1-29" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> p <span class="kw">in</span> ThreadPool:</span><span id="cb1-30"><a href="#cb1-30" aria-hidden="true" tabindex="-1"></a>        p.join()</span><span id="cb1-31"><a href="#cb1-31" aria-hidden="true" tabindex="-1"></a>    df <span class="op">=</span> pd.concat([p.result <span class="cf">for</span> p <span class="kw">in</span> ThreadPool]) <span class="co">#把所有线程处理结果合并成要一个表格</span></span></code></pre></div><p>这里注意__init__参数中， 有一个参数为*，这里参见前面文章 <a href="https://zhuanlan.zhihu.com/p/372492539">Python形参中*的作用(非*args，**kwargs)</a></p><p>网上很多线程实现方案里， 都完全重写了__init__ 和 run 方法， 把私货写进去。 笔者个人觉得， 官方库既然最原始这样写， 自然有它的道理。 我们在继承对象的时候， 要尽量少做改动， 尽量把自定义的东西(比方说任务)放在外面输入进API就可以了。下面实现一个简单的任务，使用广度优先(bfs，最大深度默认为3，要不然时间略长)统计系统(Win)各个磁盘文件路径、大小以及创建时间。</p><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func(rootpath, maxdepth<span class="op">=</span><span class="dv">3</span>):</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    df <span class="op">=</span> pd.DataFrame()</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    filepaths <span class="op">=</span> [(rootpath, <span class="dv">0</span>)]  <span class="co">#维护一个队列， 每个路径附带一个深度值</span></span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="bu">len</span>(filepaths) <span class="op">!=</span> <span class="dv">0</span>:</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>        cur_path, cur_depth <span class="op">=</span> filepaths.pop(<span class="dv">0</span>)</span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> cur_depth <span class="op">&gt;=</span> maxdepth:  <span class="co">#深度达到最大深度停止搜索</span></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>            idx <span class="op">=</span> <span class="bu">len</span>(df)  </span><span id="cb2-8"><a href="#cb2-8" aria-hidden="true" tabindex="-1"></a>            df.loc[idx, <span class="st">'path'</span>] <span class="op">=</span> os.path.join(cur_path)  <span class="co">#记录路径</span></span><span id="cb2-9"><a href="#cb2-9" aria-hidden="true" tabindex="-1"></a>            df.loc[idx, <span class="st">'date'</span>] <span class="op">=</span> os.path.getctime(cur_path)  <span class="co">#记录时间</span></span><span id="cb2-10"><a href="#cb2-10" aria-hidden="true" tabindex="-1"></a>            df.loc[idx, <span class="st">'size'</span>] <span class="op">=</span> os.path.getsize(cur_path)  <span class="co">#记录文件大小</span></span><span id="cb2-11"><a href="#cb2-11" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span><span id="cb2-12"><a href="#cb2-12" aria-hidden="true" tabindex="-1"></a>            <span class="cf">try</span>:  <span class="co">#这个纯粹是因为Win系统有些路径不让访问报OSError， 哪怕开了管理员权限</span></span><span id="cb2-13"><a href="#cb2-13" aria-hidden="true" tabindex="-1"></a>                subfiles <span class="op">=</span> os.listdir(cur_path)</span><span id="cb2-14"><a href="#cb2-14" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> f <span class="kw">in</span> subfiles:</span><span id="cb2-15"><a href="#cb2-15" aria-hidden="true" tabindex="-1"></a>                    subfpath <span class="op">=</span> os.path.join(cur_path, f)</span><span id="cb2-16"><a href="#cb2-16" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">if</span> os.path.isdir(subfpath):</span><span id="cb2-17"><a href="#cb2-17" aria-hidden="true" tabindex="-1"></a>                        filepaths.append((subfpath, cur_depth<span class="op">+</span><span class="dv">1</span>))  <span class="co">#如果是文件夹, 继续bfs搜索</span></span><span id="cb2-18"><a href="#cb2-18" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">else</span>:</span><span id="cb2-19"><a href="#cb2-19" aria-hidden="true" tabindex="-1"></a>                        idx <span class="op">=</span> <span class="bu">len</span>(df)</span><span id="cb2-20"><a href="#cb2-20" aria-hidden="true" tabindex="-1"></a>                        df.loc[idx, <span class="st">'path'</span>] <span class="op">=</span> os.path.join(subfpath)</span><span id="cb2-21"><a href="#cb2-21" aria-hidden="true" tabindex="-1"></a>                        df.loc[idx, <span class="st">'date'</span>] <span class="op">=</span> os.path.getctime(subfpath)</span><span id="cb2-22"><a href="#cb2-22" aria-hidden="true" tabindex="-1"></a>                        df.loc[idx, <span class="st">'size'</span>] <span class="op">=</span> os.path.getsize(subfpath)</span><span id="cb2-23"><a href="#cb2-23" aria-hidden="true" tabindex="-1"></a>            <span class="cf">except</span> <span class="pp">OSError</span>:</span><span id="cb2-24"><a href="#cb2-24" aria-hidden="true" tabindex="-1"></a>                <span class="cf">pass</span></span><span id="cb2-25"><a href="#cb2-25" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> df</span></code></pre></div><p>下面上完整代码：</p><div class="sourceCode" id="cb3"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb3-1"><a href="#cb3-1" aria-hidden="true" tabindex="-1"></a><span class="co"># -*- coding: utf-8 -*- </span></span><span id="cb3-2"><a href="#cb3-2" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> datetime</span><span id="cb3-3"><a href="#cb3-3" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> os</span><span id="cb3-4"><a href="#cb3-4" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> time</span><span id="cb3-5"><a href="#cb3-5" aria-hidden="true" tabindex="-1"></a><span class="im">from</span> threading <span class="im">import</span> Thread</span><span id="cb3-6"><a href="#cb3-6" aria-hidden="true" tabindex="-1"></a><span class="im">import</span> pandas <span class="im">as</span> pd</span><span id="cb3-7"><a href="#cb3-7" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-8"><a href="#cb3-8" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-9"><a href="#cb3-9" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func(rootpath, maxdepth<span class="op">=</span><span class="dv">3</span>):</span><span id="cb3-10"><a href="#cb3-10" aria-hidden="true" tabindex="-1"></a>    df <span class="op">=</span> pd.DataFrame()</span><span id="cb3-11"><a href="#cb3-11" aria-hidden="true" tabindex="-1"></a>    filepaths <span class="op">=</span> [(rootpath, <span class="dv">0</span>)]  <span class="co">#维护一个队列， 每个路径附带一个深度值</span></span><span id="cb3-12"><a href="#cb3-12" aria-hidden="true" tabindex="-1"></a>    <span class="cf">while</span> <span class="bu">len</span>(filepaths) <span class="op">!=</span> <span class="dv">0</span>:</span><span id="cb3-13"><a href="#cb3-13" aria-hidden="true" tabindex="-1"></a>        cur_path, cur_depth <span class="op">=</span> filepaths.pop(<span class="dv">0</span>)</span><span id="cb3-14"><a href="#cb3-14" aria-hidden="true" tabindex="-1"></a>        <span class="cf">if</span> cur_depth <span class="op">&gt;=</span> maxdepth:  <span class="co">#深度达到最大深度停止搜索</span></span><span id="cb3-15"><a href="#cb3-15" aria-hidden="true" tabindex="-1"></a>            idx <span class="op">=</span> <span class="bu">len</span>(df)  </span><span id="cb3-16"><a href="#cb3-16" aria-hidden="true" tabindex="-1"></a>            df.loc[idx, <span class="st">'path'</span>] <span class="op">=</span> os.path.join(cur_path)  <span class="co">#记录路径</span></span><span id="cb3-17"><a href="#cb3-17" aria-hidden="true" tabindex="-1"></a>            df.loc[idx, <span class="st">'date'</span>] <span class="op">=</span> os.path.getctime(cur_path)  <span class="co">#记录时间</span></span><span id="cb3-18"><a href="#cb3-18" aria-hidden="true" tabindex="-1"></a>            df.loc[idx, <span class="st">'size'</span>] <span class="op">=</span> os.path.getsize(cur_path)  <span class="co">#记录文件大小</span></span><span id="cb3-19"><a href="#cb3-19" aria-hidden="true" tabindex="-1"></a>        <span class="cf">else</span>:</span><span id="cb3-20"><a href="#cb3-20" aria-hidden="true" tabindex="-1"></a>            <span class="cf">try</span>:  <span class="co">#这个纯粹是因为Win系统有些路径不让访问报OSError， 哪怕开了管理员权限</span></span><span id="cb3-21"><a href="#cb3-21" aria-hidden="true" tabindex="-1"></a>                subfiles <span class="op">=</span> os.listdir(cur_path)</span><span id="cb3-22"><a href="#cb3-22" aria-hidden="true" tabindex="-1"></a>                <span class="cf">for</span> f <span class="kw">in</span> subfiles:</span><span id="cb3-23"><a href="#cb3-23" aria-hidden="true" tabindex="-1"></a>                    subfpath <span class="op">=</span> os.path.join(cur_path, f)</span><span id="cb3-24"><a href="#cb3-24" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">if</span> os.path.isdir(subfpath):</span><span id="cb3-25"><a href="#cb3-25" aria-hidden="true" tabindex="-1"></a>                        filepaths.append((subfpath, cur_depth<span class="op">+</span><span class="dv">1</span>))  <span class="co">#如果是文件夹, 继续bfs搜索</span></span><span id="cb3-26"><a href="#cb3-26" aria-hidden="true" tabindex="-1"></a>                    <span class="cf">else</span>:</span><span id="cb3-27"><a href="#cb3-27" aria-hidden="true" tabindex="-1"></a>                        idx <span class="op">=</span> <span class="bu">len</span>(df)</span><span id="cb3-28"><a href="#cb3-28" aria-hidden="true" tabindex="-1"></a>                        df.loc[idx, <span class="st">'path'</span>] <span class="op">=</span> os.path.join(subfpath)</span><span id="cb3-29"><a href="#cb3-29" aria-hidden="true" tabindex="-1"></a>                        df.loc[idx, <span class="st">'date'</span>] <span class="op">=</span> os.path.getctime(subfpath)</span><span id="cb3-30"><a href="#cb3-30" aria-hidden="true" tabindex="-1"></a>                        df.loc[idx, <span class="st">'size'</span>] <span class="op">=</span> os.path.getsize(subfpath)</span><span id="cb3-31"><a href="#cb3-31" aria-hidden="true" tabindex="-1"></a>            <span class="cf">except</span> <span class="pp">OSError</span>:</span><span id="cb3-32"><a href="#cb3-32" aria-hidden="true" tabindex="-1"></a>                <span class="cf">pass</span></span><span id="cb3-33"><a href="#cb3-33" aria-hidden="true" tabindex="-1"></a>    <span class="cf">return</span> df</span><span id="cb3-34"><a href="#cb3-34" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-35"><a href="#cb3-35" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-36"><a href="#cb3-36" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> MyThread(Thread):</span><span id="cb3-37"><a href="#cb3-37" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, group<span class="op">=</span><span class="va">None</span>, target<span class="op">=</span><span class="va">None</span>, name<span class="op">=</span><span class="va">None</span>,</span><span id="cb3-38"><a href="#cb3-38" aria-hidden="true" tabindex="-1"></a>                 args<span class="op">=</span>(), kwargs<span class="op">=</span><span class="va">None</span>, <span class="op">*</span>, daemon<span class="op">=</span><span class="va">None</span>) <span class="op">-&gt;</span> <span class="va">None</span>:   <span class="co">#这里定义直接copy Thread类里原生定义</span></span><span id="cb3-39"><a href="#cb3-39" aria-hidden="true" tabindex="-1"></a>        <span class="bu">super</span>().<span class="fu">__init__</span>(group<span class="op">=</span>group, target<span class="op">=</span>target, </span><span id="cb3-40"><a href="#cb3-40" aria-hidden="true" tabindex="-1"></a>                        name<span class="op">=</span>name, args<span class="op">=</span>args, </span><span id="cb3-41"><a href="#cb3-41" aria-hidden="true" tabindex="-1"></a>                        kwargs<span class="op">=</span>kwargs, daemon<span class="op">=</span>daemon)  </span><span id="cb3-42"><a href="#cb3-42" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-43"><a href="#cb3-43" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> run(<span class="va">self</span>) <span class="op">-&gt;</span> <span class="va">None</span>:</span><span id="cb3-44"><a href="#cb3-44" aria-hidden="true" tabindex="-1"></a>        <span class="cf">try</span>:</span><span id="cb3-45"><a href="#cb3-45" aria-hidden="true" tabindex="-1"></a>            <span class="cf">if</span> <span class="va">self</span>._target:</span><span id="cb3-46"><a href="#cb3-46" aria-hidden="true" tabindex="-1"></a>                <span class="va">self</span>.result <span class="op">=</span> <span class="va">self</span>._target(<span class="op">*</span><span class="va">self</span>._args, <span class="op">**</span><span class="va">self</span>._kwargs) <span class="co">#与Thread类唯一不同的是， 我们用类内属性result保存每个线程结果</span></span><span id="cb3-47"><a href="#cb3-47" aria-hidden="true" tabindex="-1"></a>        <span class="cf">finally</span>:</span><span id="cb3-48"><a href="#cb3-48" aria-hidden="true" tabindex="-1"></a>            <span class="kw">del</span> <span class="va">self</span>._target, <span class="va">self</span>._args, <span class="va">self</span>._kwargs</span><span id="cb3-49"><a href="#cb3-49" aria-hidden="true" tabindex="-1"></a>        </span><span id="cb3-50"><a href="#cb3-50" aria-hidden="true" tabindex="-1"></a></span><span id="cb3-51"><a href="#cb3-51" aria-hidden="true" tabindex="-1"></a><span class="cf">if</span> <span class="va">__name__</span> <span class="op">==</span> <span class="st">'__main__'</span>:</span><span id="cb3-52"><a href="#cb3-52" aria-hidden="true" tabindex="-1"></a>    ThreadPool <span class="op">=</span> []</span><span id="cb3-53"><a href="#cb3-53" aria-hidden="true" tabindex="-1"></a>    ThreadPool.append(MyThread(target<span class="op">=</span>func, args<span class="op">=</span>(<span class="st">'c:/'</span>, <span class="dv">3</span>)))</span><span id="cb3-54"><a href="#cb3-54" aria-hidden="true" tabindex="-1"></a>    ThreadPool.append(MyThread(target<span class="op">=</span>func, args<span class="op">=</span>(<span class="st">'d:/'</span>, <span class="dv">3</span>)))</span><span id="cb3-55"><a href="#cb3-55" aria-hidden="true" tabindex="-1"></a>    ThreadPool.append(MyThread(target<span class="op">=</span>func, args<span class="op">=</span>(<span class="st">'e:/'</span>, <span class="dv">3</span>)))</span><span id="cb3-56"><a href="#cb3-56" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> p <span class="kw">in</span> ThreadPool:</span><span id="cb3-57"><a href="#cb3-57" aria-hidden="true" tabindex="-1"></a>        p.start()</span><span id="cb3-58"><a href="#cb3-58" aria-hidden="true" tabindex="-1"></a>    <span class="cf">for</span> p <span class="kw">in</span> ThreadPool:</span><span id="cb3-59"><a href="#cb3-59" aria-hidden="true" tabindex="-1"></a>        p.join()</span><span id="cb3-60"><a href="#cb3-60" aria-hidden="true" tabindex="-1"></a>    df <span class="op">=</span> pd.concat([p.result <span class="cf">for</span> p <span class="kw">in</span> ThreadPool])</span><span id="cb3-61"><a href="#cb3-61" aria-hidden="true" tabindex="-1"></a>    df.to_csv(<span class="st">'thread.csv'</span>, index<span class="op">=</span><span class="va">None</span>)</span><span id="cb3-62"><a href="#cb3-62" aria-hidden="true" tabindex="-1"></a>   </span></code></pre></div><p>收工！ *** 码痴， coding 改变人生！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;熊猫.jpg&quot;&gt; 最近业务需要处理一批表格数据。处理过程中，成千上万条数据都需要进行i/o读写，自然而然要用到并发编程。&lt;/p&gt;
&lt;p&gt;python并发编程主要包括以下三种：&lt;/p&gt;
&lt;ol type=&quot;1&quot;&gt;
&lt;li&gt;&lt;p&gt;多进程：主要用于处理cpu密</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
    <category term="pandas 多线程" scheme="http://example.com/tags/pandas-%E5%A4%9A%E7%BA%BF%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Python形参中*的作用(非*args**kwargs)</title>
    <link href="http://example.com/2021/05/19/Python%E5%BD%A2%E5%8F%82%E4%B8%AD-%E7%9A%84%E4%BD%9C%E7%94%A8-%E9%9D%9E-args-kwargs/"/>
    <id>http://example.com/2021/05/19/Python%E5%BD%A2%E5%8F%82%E4%B8%AD-%E7%9A%84%E4%BD%9C%E7%94%A8-%E9%9D%9E-args-kwargs/</id>
    <published>2021-05-19T00:44:51.000Z</published>
    <updated>2021-07-05T17:00:12.261Z</updated>
    
    <content type="html"><![CDATA[<p><img src="py.jpg"> 因业务需求， 阅读了python多线程库threading源码。发现__init__函数是这样定义的</p><div class="sourceCode" id="cb1"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb1-1"><a href="#cb1-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Thread:</span><span id="cb1-2"><a href="#cb1-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb1-3"><a href="#cb1-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, group<span class="op">=</span><span class="va">None</span>, target<span class="op">=</span><span class="va">None</span>, name<span class="op">=</span><span class="va">None</span>,</span><span id="cb1-4"><a href="#cb1-4" aria-hidden="true" tabindex="-1"></a>                 args<span class="op">=</span>(), kwargs<span class="op">=</span><span class="va">None</span>, <span class="op">*</span>, daemon<span class="op">=</span><span class="va">None</span>):</span></code></pre></div><p>其中 * 瞬间打开了我新世界大门，因为按理说python不支持特殊字符作为变量名。</p><p>所有中文搜索引擎没有发现相关解释。 不得已去 栈溢出 网站看看外国大佬怎么说， 很幸运找到了解释。</p><p>根据PEP3102，* 的基本意义为， 在这个位置之后的参数必须用关键字参数(keyword arguement)作为输入。 其作用有两个: ## 1) 省略关键字参数的默认值 请看下面的简单例子</p><div class="sourceCode" id="cb2"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb2-1"><a href="#cb2-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func(arg1, arg2, <span class="op">*</span>, arg3, arg4):</span><span id="cb2-2"><a href="#cb2-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg1: '</span> <span class="op">+</span> arg1)</span><span id="cb2-3"><a href="#cb2-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg2: '</span> <span class="op">+</span> arg2)</span><span id="cb2-4"><a href="#cb2-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg3: '</span> <span class="op">+</span> arg3)</span><span id="cb2-5"><a href="#cb2-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg4: '</span> <span class="op">+</span> arg4)</span><span id="cb2-6"><a href="#cb2-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb2-7"><a href="#cb2-7" aria-hidden="true" tabindex="-1"></a>func(<span class="st">'arg1'</span>, <span class="st">'arg2'</span>, <span class="st">'arg3'</span>, <span class="st">'arg4'</span>)</span></code></pre></div><p>返回</p><pre><code>Exception has occurred: TypeErrorfunc() takes 2 positional arguments but 4 were given</code></pre><p>这里是说func只需要2个位置参数(position arguements), 但是接到了4个。修改代码如下:</p><div class="sourceCode" id="cb4"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb4-1"><a href="#cb4-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func(arg1, arg2, <span class="op">*</span>, arg3, arg4):</span><span id="cb4-2"><a href="#cb4-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg1: '</span> <span class="op">+</span> arg1)</span><span id="cb4-3"><a href="#cb4-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg2: '</span> <span class="op">+</span> arg2)</span><span id="cb4-4"><a href="#cb4-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg3: '</span> <span class="op">+</span> arg3)</span><span id="cb4-5"><a href="#cb4-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg4: '</span> <span class="op">+</span> arg4)</span><span id="cb4-6"><a href="#cb4-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb4-7"><a href="#cb4-7" aria-hidden="true" tabindex="-1"></a>func(<span class="st">'arg1'</span>, <span class="st">'arg2'</span>, arg3<span class="op">=</span><span class="st">'arg3'</span>, arg4<span class="op">=</span><span class="st">'arg4'</span>)</span></code></pre></div><p>返回</p><div class="sourceCode" id="cb5"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb5-1"><a href="#cb5-1" aria-hidden="true" tabindex="-1"></a><span class="an">This is arg1:</span><span class="co"> arg1</span></span><span id="cb5-2"><a href="#cb5-2" aria-hidden="true" tabindex="-1"></a><span class="an">This is arg2:</span><span class="co"> arg2</span></span><span id="cb5-3"><a href="#cb5-3" aria-hidden="true" tabindex="-1"></a><span class="an">This is arg3:</span><span class="co"> arg3</span></span><span id="cb5-4"><a href="#cb5-4" aria-hidden="true" tabindex="-1"></a><span class="an">This is arg4:</span><span class="co"> arg4</span></span></code></pre></div><p>再来看看arg3， arg4 有没有关键字参数的打包解包(pack-unpack)性质</p><div class="sourceCode" id="cb6"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb6-1"><a href="#cb6-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func(arg1, arg2, <span class="op">*</span>, arg3, arg4):</span><span id="cb6-2"><a href="#cb6-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg1: '</span> <span class="op">+</span> arg1)</span><span id="cb6-3"><a href="#cb6-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg2: '</span> <span class="op">+</span> arg2)</span><span id="cb6-4"><a href="#cb6-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg3: '</span> <span class="op">+</span> arg3)</span><span id="cb6-5"><a href="#cb6-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg4: '</span> <span class="op">+</span> arg4)</span><span id="cb6-6"><a href="#cb6-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb6-7"><a href="#cb6-7" aria-hidden="true" tabindex="-1"></a>kwarg <span class="op">=</span> {<span class="st">'arg3'</span>:<span class="st">'arg3'</span>, <span class="st">'arg4'</span>:<span class="st">'arg4'</span>}</span><span id="cb6-8"><a href="#cb6-8" aria-hidden="true" tabindex="-1"></a>func(<span class="st">'arg1'</span>, <span class="st">'arg2'</span>, <span class="op">**</span>kwarg)</span></code></pre></div><p>返回</p><div class="sourceCode" id="cb7"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb7-1"><a href="#cb7-1" aria-hidden="true" tabindex="-1"></a><span class="an">This is arg1:</span><span class="co"> arg1</span></span><span id="cb7-2"><a href="#cb7-2" aria-hidden="true" tabindex="-1"></a><span class="an">This is arg2:</span><span class="co"> arg2</span></span><span id="cb7-3"><a href="#cb7-3" aria-hidden="true" tabindex="-1"></a><span class="an">This is arg3:</span><span class="co"> arg3</span></span><span id="cb7-4"><a href="#cb7-4" aria-hidden="true" tabindex="-1"></a><span class="an">This is arg4:</span><span class="co"> arg4</span></span></code></pre></div><p>证明 arg3， arg4 确实是可以不赋默认值的关键字参数。下面来看第二个作用。</p><h2 id="避免-位置参数-和-关键字参数混用">2) 避免 位置参数 和 关键字参数混用</h2><p>有时候我们输入位置参数时， 会不小心多打， 导致关键字参数被输入错。</p><div class="sourceCode" id="cb8"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb8-1"><a href="#cb8-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func(arg1, arg2, arg3, arg4<span class="op">=</span><span class="va">False</span>):</span><span id="cb8-2"><a href="#cb8-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg1: '</span> <span class="op">+</span> arg1)</span><span id="cb8-3"><a href="#cb8-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg2: '</span> <span class="op">+</span> arg2)</span><span id="cb8-4"><a href="#cb8-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg3: '</span> <span class="op">+</span> arg3)</span><span id="cb8-5"><a href="#cb8-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg4: '</span> <span class="op">+</span> arg4)</span><span id="cb8-6"><a href="#cb8-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb8-7"><a href="#cb8-7" aria-hidden="true" tabindex="-1"></a>func(<span class="st">'arg1'</span>, <span class="st">'arg2'</span>, <span class="st">'arg3'</span>, <span class="st">'arg3'</span>)</span></code></pre></div><p>返回</p><div class="sourceCode" id="cb9"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb9-1"><a href="#cb9-1" aria-hidden="true" tabindex="-1"></a><span class="an">This is arg1:</span><span class="co"> arg1</span></span><span id="cb9-2"><a href="#cb9-2" aria-hidden="true" tabindex="-1"></a><span class="an">This is arg2:</span><span class="co"> arg2</span></span><span id="cb9-3"><a href="#cb9-3" aria-hidden="true" tabindex="-1"></a><span class="an">This is arg3:</span><span class="co"> arg3</span></span><span id="cb9-4"><a href="#cb9-4" aria-hidden="true" tabindex="-1"></a><span class="an">This is arg4:</span><span class="co"> arg3</span></span></code></pre></div><p>可以看到， 由于我们多输入了一个 'arg3', 导致arg4接到了错误参数。修改代码如下：</p><div class="sourceCode" id="cb10"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb10-1"><a href="#cb10-1" aria-hidden="true" tabindex="-1"></a><span class="kw">def</span> func(arg1, arg2, arg3, <span class="op">*</span>, arg4<span class="op">=</span><span class="va">False</span>):</span><span id="cb10-2"><a href="#cb10-2" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg1: '</span> <span class="op">+</span> arg1)</span><span id="cb10-3"><a href="#cb10-3" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg2: '</span> <span class="op">+</span> arg2)</span><span id="cb10-4"><a href="#cb10-4" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg3: '</span> <span class="op">+</span> arg3)</span><span id="cb10-5"><a href="#cb10-5" aria-hidden="true" tabindex="-1"></a>    <span class="bu">print</span>(<span class="st">'This is arg4: '</span> <span class="op">+</span> arg4)</span><span id="cb10-6"><a href="#cb10-6" aria-hidden="true" tabindex="-1"></a></span><span id="cb10-7"><a href="#cb10-7" aria-hidden="true" tabindex="-1"></a>func(<span class="st">'arg1'</span>, <span class="st">'arg2'</span>, <span class="st">'arg3'</span>, <span class="st">'arg3'</span>)</span></code></pre></div><p>返回</p><div class="sourceCode" id="cb11"><pre class="sourceCode markdown"><code class="sourceCode markdown"><span id="cb11-1"><a href="#cb11-1" aria-hidden="true" tabindex="-1"></a>func() takes 3 positional arguments but 4 were given</span></code></pre></div><p>有效防止了我们输入错误。</p><p>回到刚开始python threading 多线程库的问题,</p><div class="sourceCode" id="cb12"><pre class="sourceCode python"><code class="sourceCode python"><span id="cb12-1"><a href="#cb12-1" aria-hidden="true" tabindex="-1"></a><span class="kw">class</span> Thread:</span><span id="cb12-2"><a href="#cb12-2" aria-hidden="true" tabindex="-1"></a></span><span id="cb12-3"><a href="#cb12-3" aria-hidden="true" tabindex="-1"></a>    <span class="kw">def</span> <span class="fu">__init__</span>(<span class="va">self</span>, group<span class="op">=</span><span class="va">None</span>, target<span class="op">=</span><span class="va">None</span>, name<span class="op">=</span><span class="va">None</span>,</span><span id="cb12-4"><a href="#cb12-4" aria-hidden="true" tabindex="-1"></a>                 args<span class="op">=</span>(), kwargs<span class="op">=</span><span class="va">None</span>, <span class="op">*</span>, daemon<span class="op">=</span><span class="va">None</span>):</span></code></pre></div><p>这里声明了 daemon 一定要用关键字参数输入, 说明开发者认为这个参数十分重要。事实上， 这个daemon意思是守护线程的意思，和阻塞线程正好是两个相反的逻辑顺序。 本文不做深入讲解， 读者只需要知道这里daemon设置为True， False， 或者保持默认参数，会导致这个线程出现三个完全不同的运行状态， 因而要使用*来提醒用户避免输错。 ## 参考</p><ul><li>[1] <a href="https://stackoverflow.com/questions/11365909/what-does-a-single-without-identifier-mean-in-the-python3-functions">What does a single * without identifier mean in the Python3 functions?</a></li><li>[2] <a href="https://www.python.org/dev/peps/pep-3102/">PEP 3102 -- Keyword-Only Arguments</a></li><li>[3] <a href="https://stackoverflow.com/questions/59661042/what-do-single-star-and-slash-do-as-independent-parameters">What do * (single star) and / (slash) do as independent parameters?</a></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;&lt;img src=&quot;py.jpg&quot;&gt; 因业务需求， 阅读了python多线程库threading源码。发现__init__函数是这样定义的&lt;/p&gt;
&lt;div class=&quot;sourceCode&quot; id=&quot;cb1&quot;&gt;&lt;pre class=&quot;sourceCode python&quot;</summary>
      
    
    
    
    <category term="python" scheme="http://example.com/categories/python/"/>
    
    
  </entry>
  
  <entry>
    <title>SSH 隧道端口转发实现Jupyter Notebook远程访问服务器</title>
    <link href="http://example.com/2021/05/18/SSH-%E9%9A%A7%E9%81%93%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%AE%9E%E7%8E%B0Jupyter-Notebook%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>http://example.com/2021/05/18/SSH-%E9%9A%A7%E9%81%93%E7%AB%AF%E5%8F%A3%E8%BD%AC%E5%8F%91%E5%AE%9E%E7%8E%B0Jupyter-Notebook%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1%E5%99%A8/</id>
    <published>2021-05-18T15:16:13.000Z</published>
    <updated>2021-07-05T16:54:40.828Z</updated>
    
    <content type="html"><![CDATA[<p>Jupyter Notebook 在广大python用户，尤其是数据科学工作者中深受喜爱。其方便的交互性， 可视性特别适合数据分析。虽然笔者已经多年不以其作为主力python编辑环境，但实验室还是有人(数学背景出身，貌似搞数学的pythoner都特别喜欢jupyter)对其十分青睐。 身为实验室服务器运维的笔者， 自然要负责配置好jupyeter远程访问。网上所有的教程(包括官网)都千篇一律需要修改服务器本地jupyter_notebook_config.py, 而且绝大多数教程并没有按照官网建议的配置安全证书。笔者曾经历经千辛万苦配成功过，但踩坑无数，这里不再赘述。 偶然一次机会发现 ssh 隧道端口转发协议， 遂产生idea使用它来实现远程访问服务器。</p><p>&nbsp; ## 一、SSH 隧道端口转发简介 SSH隧道的特点：</p><p>1、加密SSH客户端端至SSH服务器端之间的通讯数据</p><p>2、突破防火墙的限制完成一些之前无法建立的TCP连接</p><p>在本文应用场景下，简而言之就是jupyter notebook 在服务器终端启动时，会在服务器本地产生一个服务。我们需要做的就是通过 ssh 隧道转发协议，将服务器 jupyter 服务端口转发至我们本地机器上的端口， 从而进行远程访问。SSH 端口转发有三个选项：-L、-R和-D。这里我们用-L，即将远程(L)主机端口转发本地。</p><p>&nbsp; ## 二、上机操作 Linux OS：Ubuntu18.04</p><p>打开本地终端登录服务器，进入要使用的python环境(conda activate env)，输入</p><pre><code>jupyter notebook --port=20000</code></pre><p>这里20000为远程端口， 读者可自定义。 返回如下(隐去真实路径信息)</p><pre><code>(base) MatrixMan@server:~$ jupyter notebook --port=20000[I 19:56:22.007 NotebookApp] JupyterLab extension loaded from /your/path/to/anaconda3/lib/python3.8/site-packages/jupyterlab[I 19:56:22.007 NotebookApp] JupyterLab application directory is /your/path/to/anaconda3/share/jupyter/lab[I 19:56:22.011 NotebookApp] 启动notebooks 在本地路径: /your/path/to/boot[I 19:56:22.011 NotebookApp] 本程序运行在: http://iiplab-server:20000/[I 19:56:22.011 NotebookApp] 使用control-c停止此服务器并关闭所有内核(两次跳过确认).</code></pre><p>打开另一个终端(也可以使用nohup命令将jupyter挂在系统后台，就不用打开第二个终端)， 输入(隐去真实地址)</p><pre><code>ssh -L localhost:2000:localhost:20000 MatrixMan@143.111.56.87</code></pre><p>如果配置过ssh 免密登录的话，此时已经可以在本地访问了。</p><p>打开浏览器， 输入</p><pre><code>http://localhost:2000/</code></pre><figure><img src="./f1.jpg" alt="效果图"><figcaption aria-hidden="true">效果图</figcaption></figure><p>搞定！！！ *** 欢迎提出反馈意见， 批评指正.<br>矩阵侠， 分享工作学习中所见所闻， 欢迎交流！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Jupyter Notebook 在广大python用户，尤其是数据科学工作者中深受喜爱。其方便的交互性， 可视性特别适合数据分析。虽然笔者已经多年不以其作为主力python编辑环境，但实验室还是有人(数学背景出身，貌似搞数学的pythoner都特别喜欢jupyter)对其</summary>
      
    
    
    
    <category term="服务器运维" scheme="http://example.com/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%BF%90%E7%BB%B4/"/>
    
    
    <category term="jupyter" scheme="http://example.com/tags/jupyter/"/>
    
  </entry>
  
</feed>
